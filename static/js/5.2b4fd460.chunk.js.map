{"version":3,"sources":["../../../../src/icons/general/IconEdit.js","../node_modules/lodash/isEqual.js","../../../../src/components/collapsible/Collapsible.js","../node_modules/react-animate-height/lib/AnimateHeight.js","../../../../src/icons/general/IconAddMetadataEmptyState.js","../../../../src/features/metadata-instance-editor/EmptyContent.js","../../../../src/icons/general/IconMetadataColored.js","../../../../src/components/toggle/Toggle.js","../../../../src/components/toggle/ToggleField.js","../../../../src/components/radio/RadioGroup.js","../../../../src/components/radio/RadioGroupField.js","../../../../src/features/metadata-instance-editor/CascadePolicy.js","../../../../src/features/metadata-instance-editor/metadataUtil.js","../../../../src/features/metadata-instance-editor/TemplatedInstance.js","../../../../src/features/metadata-instance-editor/CustomInstanceNewField.js","../../../../../src/features/metadata-instance-editor/fields/CustomField.js","../../../../src/features/metadata-instance-editor/CustomInstance.js","../../../../src/features/metadata-instance-editor/MetadataInstanceConfirmDialog.js","../../../../src/features/metadata-instance-editor/Footer.js","../../../../src/features/metadata-instance-editor/Instance.js","../../../../src/features/metadata-instance-editor/Instances.js","../../../../src/icons/general/IconSearch.js","../../../../src/components/search-form/SearchForm.js","../../../../src/features/metadata-instance-editor/TemplateDropdown.js","../../../../src/elements/content-sidebar/MetadataSidebar.js"],"names":["className","color","height","title","width","viewBox","d","fill","baseIsEqual","require","module","exports","value","other","Collapsible","onOpen","onClose","prevState","isOpen","props","this","animationDuration","buttonProps","children","isBordered","hasStickyHeader","headerActionItems","sectionClassName","classNames","interactionTarget","modifiedButtonProps","omit","buttonClassName","onClick","type","duration","React","Object","defineProperty","_typeof","Symbol","iterator","obj","constructor","prototype","_extends","assign","target","i","arguments","length","source","key","hasOwnProperty","call","_createClass","defineProperties","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_react2","_interopRequireDefault","_propTypes2","_classnames2","__esModule","default","_defineProperty","ANIMATION_STATE_CLASSES","animating","animatingUp","animatingDown","animatingToHeightZero","animatingToHeightAuto","animatingToHeightSpecific","static","staticHeightZero","staticHeightAuto","staticHeightSpecific","PROPS_TO_OMIT","_len","keys","Array","_key","res","objectKeys","indexOf","cancelAnimationFrames","requestAnimationFrameIDs","forEach","id","cancelAnimationFrame","isNumber","n","isNaN","parseFloat","isFinite","isPercentage","search","substr","runCallback","callback","params","AnimateHeight","_React$Component","instance","TypeError","_classCallCheck","_this","self","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","animationFrameIDs","overflow","animationStateClasses","getStaticStateClasses","state","shouldUseTransitions","subClass","superClass","create","setPrototypeOf","_inherits","contentElement","style","hideContent","prevProps","_this2","_props","delay","onAnimationEnd","onAnimationStart","_cx","showContent","contentHeight","offsetHeight","totalDuration","newHeight","timeoutState","isCurrentHeightAuto","timeoutAnimationStateClasses","setState","clearTimeout","timeoutID","animationClassesTimeoutID","requestAnimationFrame","startAnimationHelper","setTimeout","display","_cx2","_cx3","_this3","_props2","animateOpacity","applyInlineTransitions","contentClassName","easing","_state","componentStyle","transition","WebkitTransition","contentStyle","opacity","componentClasses","createElement","apply","undefined","concat","ref","el","Component","propTypes","bool","object","any","isRequired","string","number","propName","componentName","func","defaultProps","fillRule","fillOpacity","stroke","strokeWidth","rx","x","y","canAdd","messages","description","isDisabled","isOn","isToggleRightAligned","label","name","onBlur","onChange","rest","classes","toggleElements","checked","disabled","RadioGroup","event","stateValue","onChangeHandler","radio","isSelected","canEdit","isCascadingEnabled","isCascadingOverwritten","isCustomMetadata","onCascadeToggle","onCascadeModeChange","shouldShowCascadeOptions","readOnlyState","tagName","e","href","isHidden","normalizeTemplates","clonedTemplates","templates","template","fields","templateFilters","normalizedFilters","Set","normalizeTemplateFilters","field","data","errors","onFieldChange","onFieldRemove","hasFields","hasVisibleFields","showNoFieldsMessage","showHiddenFieldsMessage","dataKey","dataValue","displayName","error","onRemove","options","CustomInstanceNewField","onAdd","properties","attr","currentTarget","intl","isCancellable","onCancel","text","tabIndex","placeholder","hideOptionalLabel","data-resin-target","commonMessages","injectIntl","isLast","addBtn","aria-label","removeBtn","CustomInstance","isAddFieldVisible","isEqual","canAddFields","index","onConfirm","confirmationMessage","showSave","getValue","parseInt","Instance","onModification","shouldConfirmRemove","isBusy","cascadePolicy","originalData","isDirty","isCascadingPolicyApplicable","onSave","currentData","isEditing","isEnabled","overwrite","cloneDeep","isValid","isValidValue","finalErrors","finalData","message","isFile","values","metadataName","hasDataChanged","hasCascadingChanged","editClassName","position","prev","createFieldKeyToTypeMap","prevHasError","hasError","prevIsDirty","currentElement","collapsibleRef","scrollIntoView","block","behavior","isProperties","bdlWatermelonRed","renderDeleteMessage","ops","originalValue","path","op","getTitle","isLoading","onValidSubmit","noop","editors","selectedTemplateKey","templateKey","defineMessages","clearButtonTitle","searchButtonTitle","searchLabel","SearchForm","isEmpty","onSubmit","element","action","method","queryParams","useClearButton","inputProps","formatMessage","formClassNames","hiddenInputs","param","LoadableSearchActions","makeLoadable","role","autoComplete","loadingIndicatorProps","InputContainer","shouldPreventClearEventPropagation","getAvailableTemplates","allTemplates","usedTemplates","usedTemplate","TemplateDropdown","isDropdownBusy","activeTemplate","defaultTemplateIcon","activeTemplateIcon","hasUnusedTemplates","hasTemplates","hasResults","indicatorOrMessage","renderedTemplates","isTemplateSelected","isAlwaysOpen","onSelect","selector","shouldScroll","filterText","onDropdownToggle","isDropdownOpen","entryButton","buttonToggleClassName","prevTemplates","prevUsedTemplates","flyoutClassName","closeOnClick","closeOnClickOutside","shouldDefaultFocus","MARK_NAME_JS_READY","mark","MetadataSidebar","newState","onError","status","isValidError","isUserCorrectableError","code","api","file","editor","clone","oldEditor","newEditor","currentFile","currentCanUpload","getProp","newCanUpload","logger","endMarkName","isFeatureEnabled","refreshCache","fileId","elementId","showEditor","showLoadingIndicator","showTemplateDropdown","showEmptyContent","actions","sidebarView","flow","withLogger","withErrorBoundary"],"mappings":"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","file":"static/js/5.2b4fd460.chunk.js","sourcesContent":["// @flow\nimport * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconEdit = ({ className = '', color = '#999', height = 14, title, width = 14 }: Props) => (\n    <AccessibleSVG className={`icon-edit ${className}`} height={height} title={title} viewBox=\"0 0 14 14\" width={width}>\n        <path\n            className=\"fill-color\"\n            d=\"M3.21 7.89l6.47-6.48a2 2 0 0 1 2.88 2.78h-.05L6 10.72 3.21 7.89zM2.24 9l2.83 2.83L1.67 13c-.52.18-.79-.1-.62-.61z\"\n            fill={color}\n        />\n    </AccessibleSVG>\n);\n\nexport default IconEdit;\n","var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport AnimateHeight from 'react-animate-height';\n\nimport { RESIN_TAG_TARGET } from '../../common/variables';\nimport IconCaretDown from '../../icons/general/IconCaretDown';\nimport PlainButton from '../plain-button';\nimport { bdlGray50 } from '../../styles/variables';\n\nimport './Collapsible.scss';\n\ntype Props = {\n    /** Duration of animation (milliseconds) */\n    animationDuration?: number,\n    /** Other props (e.g. resin target names) to be included in the button */\n    buttonProps?: Object,\n    /** Content to be displayed in the card if it's expanded */\n    children: React.Node,\n    /** CSS class for the wrapper div */\n    className?: string,\n    /** Determines look of component */\n    hasStickyHeader?: boolean,\n    /** Determines stickiness of the header */\n    headerActionItems?: React.Node,\n    /** Determines optional header action items */\n    isBordered?: boolean,\n    /** Initial state of the collapsible card */\n    isOpen: boolean,\n    /** callback called when collapsible is opened */\n    onClose?: Function,\n    /** callback called when collapsible is collapsed */\n    onOpen?: Function,\n    /** Title string or component */\n    title: string | React.Node,\n};\n\ntype State = {\n    isOpen: boolean,\n};\n\nclass Collapsible extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        buttonProps: {},\n        className: '',\n        isOpen: true,\n        animationDuration: 100,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isOpen: props.isOpen,\n        };\n    }\n\n    toggleVisibility = () => {\n        const { onOpen, onClose } = this.props;\n        this.setState(\n            prevState => ({\n                isOpen: !prevState.isOpen,\n            }),\n            () => {\n                const { isOpen } = this.state;\n                if (isOpen && onOpen) {\n                    onOpen(this);\n                } else if (!isOpen && onClose) {\n                    onClose(this);\n                }\n            },\n        );\n    };\n\n    render() {\n        const { isOpen }: State = this.state;\n        const {\n            animationDuration,\n            buttonProps = {},\n            children,\n            className,\n            isBordered,\n            hasStickyHeader,\n            headerActionItems,\n            title,\n        }: Props = this.props;\n\n        const sectionClassName = classNames(\n            'collapsible-card',\n            {\n                'is-open': isOpen,\n            },\n            {\n                'is-bordered': isBordered,\n            },\n            className,\n        );\n        const interactionTarget = buttonProps[RESIN_TAG_TARGET];\n        const modifiedButtonProps = omit(buttonProps, [RESIN_TAG_TARGET]);\n        const buttonClassName = hasStickyHeader\n            ? 'collapsible-card-header has-sticky-header'\n            : 'collapsible-card-header';\n\n        if (interactionTarget) {\n            modifiedButtonProps[RESIN_TAG_TARGET] = `${interactionTarget}${isOpen ? 'collapse' : 'expand'}`;\n        }\n\n        return (\n            <div className={sectionClassName}>\n                <div className={buttonClassName}>\n                    <PlainButton\n                        {...modifiedButtonProps}\n                        className=\"collapsible-card-title\"\n                        onClick={this.toggleVisibility}\n                        type=\"button\"\n                    >\n                        {title}\n                        <IconCaretDown className=\"collapsible-card-header-caret\" color={bdlGray50} width={8} />\n                    </PlainButton>\n                    {isOpen && headerActionItems}\n                </div>\n                <AnimateHeight duration={animationDuration} height={isOpen ? 'auto' : 0}>\n                    <div className=\"collapsible-card-content\">{children}</div>\n                </AnimateHeight>\n            </div>\n        );\n    }\n}\n\nexport default Collapsible;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ANIMATION_STATE_CLASSES = {\n  animating: 'rah-animating',\n  animatingUp: 'rah-animating--up',\n  animatingDown: 'rah-animating--down',\n  animatingToHeightZero: 'rah-animating--to-height-zero',\n  animatingToHeightAuto: 'rah-animating--to-height-auto',\n  animatingToHeightSpecific: 'rah-animating--to-height-specific',\n  static: 'rah-static',\n  staticHeightZero: 'rah-static--height-zero',\n  staticHeightAuto: 'rah-static--height-auto',\n  staticHeightSpecific: 'rah-static--height-specific'\n};\n\nvar PROPS_TO_OMIT = ['animateOpacity', 'animationStateClasses', 'applyInlineTransitions', 'children', 'contentClassName', 'delay', 'duration', 'easing', 'height', 'onAnimationEnd', 'onAnimationStart'];\n\nfunction omit(obj) {\n  for (var _len = arguments.length, keys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n\n  if (!keys.length) {\n    return obj;\n  }\n\n  var res = {};\n  var objectKeys = Object.keys(obj);\n\n  for (var i = 0; i < objectKeys.length; i++) {\n    var key = objectKeys[i];\n\n    if (keys.indexOf(key) === -1) {\n      res[key] = obj[key];\n    }\n  }\n\n  return res;\n}\n\n// Start animation helper using nested requestAnimationFrames\nfunction startAnimationHelper(callback) {\n  var requestAnimationFrameIDs = [];\n\n  requestAnimationFrameIDs[0] = requestAnimationFrame(function () {\n    requestAnimationFrameIDs[1] = requestAnimationFrame(function () {\n      callback();\n    });\n  });\n\n  return requestAnimationFrameIDs;\n}\n\nfunction cancelAnimationFrames(requestAnimationFrameIDs) {\n  requestAnimationFrameIDs.forEach(function (id) {\n    return cancelAnimationFrame(id);\n  });\n}\n\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nfunction isPercentage(height) {\n  // Percentage height\n  return typeof height === 'string' && height.search('%') === height.length - 1 && isNumber(height.substr(0, height.length - 1));\n}\n\nfunction runCallback(callback, params) {\n  if (callback && typeof callback === 'function') {\n    callback(params);\n  }\n}\n\nvar AnimateHeight = function (_React$Component) {\n  _inherits(AnimateHeight, _React$Component);\n\n  function AnimateHeight(props) {\n    _classCallCheck(this, AnimateHeight);\n\n    var _this = _possibleConstructorReturn(this, (AnimateHeight.__proto__ || Object.getPrototypeOf(AnimateHeight)).call(this, props));\n\n    _this.animationFrameIDs = [];\n\n    var height = 'auto';\n    var overflow = 'visible';\n\n    if (isNumber(props.height)) {\n      // If value is string \"0\" make sure we convert it to number 0\n      height = props.height < 0 || props.height === '0' ? 0 : props.height;\n      overflow = 'hidden';\n    } else if (isPercentage(props.height)) {\n      // If value is string \"0%\" make sure we convert it to number 0\n      height = props.height === '0%' ? 0 : props.height;\n      overflow = 'hidden';\n    }\n\n    _this.animationStateClasses = _extends({}, ANIMATION_STATE_CLASSES, props.animationStateClasses);\n\n    var animationStateClasses = _this.getStaticStateClasses(height);\n\n    _this.state = {\n      animationStateClasses: animationStateClasses,\n      height: height,\n      overflow: overflow,\n      shouldUseTransitions: false\n    };\n    return _this;\n  }\n\n  _createClass(AnimateHeight, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var height = this.state.height;\n\n      // Hide content if height is 0 (to prevent tabbing into it)\n      // Check for contentElement is added cause this would fail in tests (react-test-renderer)\n      // Read more here: https://github.com/Stanko/react-animate-height/issues/17\n\n      if (this.contentElement && this.contentElement.style) {\n        this.hideContent(height);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _props = this.props,\n          delay = _props.delay,\n          duration = _props.duration,\n          height = _props.height,\n          onAnimationEnd = _props.onAnimationEnd,\n          onAnimationStart = _props.onAnimationStart;\n\n      // Check if 'height' prop has changed\n\n      if (this.contentElement && height !== prevProps.height) {\n        var _cx;\n\n        // Remove display: none from the content div\n        // if it was hidden to prevent tabbing into it\n        this.showContent(prevState.height);\n\n        // Cache content height\n        this.contentElement.style.overflow = 'hidden';\n        var contentHeight = this.contentElement.offsetHeight;\n        this.contentElement.style.overflow = '';\n\n        // set total animation time\n        var totalDuration = duration + delay;\n\n        var newHeight = null;\n        var timeoutState = {\n          height: null, // it will be always set to either 'auto' or specific number\n          overflow: 'hidden'\n        };\n        var isCurrentHeightAuto = prevState.height === 'auto';\n\n        if (isNumber(height)) {\n          // If value is string \"0\" make sure we convert it to number 0\n          newHeight = height < 0 || height === '0' ? 0 : height;\n          timeoutState.height = newHeight;\n        } else if (isPercentage(height)) {\n          // If value is string \"0%\" make sure we convert it to number 0\n          newHeight = height === '0%' ? 0 : height;\n          timeoutState.height = newHeight;\n        } else {\n          // If not, animate to content height\n          // and then reset to auto\n          newHeight = contentHeight; // TODO solve contentHeight = 0\n          timeoutState.height = 'auto';\n          timeoutState.overflow = null;\n        }\n\n        if (isCurrentHeightAuto) {\n          // This is the height to be animated to\n          timeoutState.height = newHeight;\n\n          // If previous height was 'auto'\n          // set starting height explicitly to be able to use transition\n          newHeight = contentHeight;\n        }\n\n        // Animation classes\n        var animationStateClasses = (0, _classnames2.default)((_cx = {}, _defineProperty(_cx, this.animationStateClasses.animating, true), _defineProperty(_cx, this.animationStateClasses.animatingUp, prevProps.height === 'auto' || height < prevProps.height), _defineProperty(_cx, this.animationStateClasses.animatingDown, height === 'auto' || height > prevProps.height), _defineProperty(_cx, this.animationStateClasses.animatingToHeightZero, timeoutState.height === 0), _defineProperty(_cx, this.animationStateClasses.animatingToHeightAuto, timeoutState.height === 'auto'), _defineProperty(_cx, this.animationStateClasses.animatingToHeightSpecific, timeoutState.height > 0), _cx));\n\n        // Animation classes to be put after animation is complete\n        var timeoutAnimationStateClasses = this.getStaticStateClasses(timeoutState.height);\n\n        // Set starting height and animating classes\n        // We are safe to call set state as it will not trigger infinite loop\n        // because of the \"height !== prevProps.height\" check\n        this.setState({ // eslint-disable-line react/no-did-update-set-state\n          animationStateClasses: animationStateClasses,\n          height: newHeight,\n          overflow: 'hidden',\n          // When animating from 'auto' we first need to set fixed height\n          // that change should be animated\n          shouldUseTransitions: !isCurrentHeightAuto\n        });\n\n        // Clear timeouts\n        clearTimeout(this.timeoutID);\n        clearTimeout(this.animationClassesTimeoutID);\n\n        if (isCurrentHeightAuto) {\n          // When animating from 'auto' we use a short timeout to start animation\n          // after setting fixed height above\n          timeoutState.shouldUseTransitions = true;\n\n          cancelAnimationFrames(this.animationFrameIDs);\n          this.animationFrameIDs = startAnimationHelper(function () {\n            _this2.setState(timeoutState);\n\n            // ANIMATION STARTS, run a callback if it exists\n            runCallback(onAnimationStart, { newHeight: timeoutState.height });\n          });\n\n          // Set static classes and remove transitions when animation ends\n          this.animationClassesTimeoutID = setTimeout(function () {\n            _this2.setState({\n              animationStateClasses: timeoutAnimationStateClasses,\n              shouldUseTransitions: false\n            });\n\n            // ANIMATION ENDS\n            // Hide content if height is 0 (to prevent tabbing into it)\n            _this2.hideContent(timeoutState.height);\n            // Run a callback if it exists\n            runCallback(onAnimationEnd, { newHeight: timeoutState.height });\n          }, totalDuration);\n        } else {\n          // ANIMATION STARTS, run a callback if it exists\n          runCallback(onAnimationStart, { newHeight: newHeight });\n\n          // Set end height, classes and remove transitions when animation is complete\n          this.timeoutID = setTimeout(function () {\n            timeoutState.animationStateClasses = timeoutAnimationStateClasses;\n            timeoutState.shouldUseTransitions = false;\n\n            _this2.setState(timeoutState);\n\n            // ANIMATION ENDS\n            // If height is auto, don't hide the content\n            // (case when element is empty, therefore height is 0)\n            if (height !== 'auto') {\n              // Hide content if height is 0 (to prevent tabbing into it)\n              _this2.hideContent(newHeight); // TODO solve newHeight = 0\n            }\n            // Run a callback if it exists\n            runCallback(onAnimationEnd, { newHeight: newHeight });\n          }, totalDuration);\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      cancelAnimationFrames(this.animationFrameIDs);\n\n      clearTimeout(this.timeoutID);\n      clearTimeout(this.animationClassesTimeoutID);\n\n      this.timeoutID = null;\n      this.animationClassesTimeoutID = null;\n      this.animationStateClasses = null;\n    }\n  }, {\n    key: 'showContent',\n    value: function showContent(height) {\n      if (height === 0) {\n        this.contentElement.style.display = '';\n      }\n    }\n  }, {\n    key: 'hideContent',\n    value: function hideContent(newHeight) {\n      if (newHeight === 0) {\n        this.contentElement.style.display = 'none';\n      }\n    }\n  }, {\n    key: 'getStaticStateClasses',\n    value: function getStaticStateClasses(height) {\n      var _cx2;\n\n      return (0, _classnames2.default)((_cx2 = {}, _defineProperty(_cx2, this.animationStateClasses.static, true), _defineProperty(_cx2, this.animationStateClasses.staticHeightZero, height === 0), _defineProperty(_cx2, this.animationStateClasses.staticHeightSpecific, height > 0), _defineProperty(_cx2, this.animationStateClasses.staticHeightAuto, height === 'auto'), _cx2));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _cx3,\n          _this3 = this;\n\n      var _props2 = this.props,\n          animateOpacity = _props2.animateOpacity,\n          applyInlineTransitions = _props2.applyInlineTransitions,\n          children = _props2.children,\n          className = _props2.className,\n          contentClassName = _props2.contentClassName,\n          duration = _props2.duration,\n          easing = _props2.easing,\n          delay = _props2.delay,\n          style = _props2.style;\n      var _state = this.state,\n          height = _state.height,\n          overflow = _state.overflow,\n          animationStateClasses = _state.animationStateClasses,\n          shouldUseTransitions = _state.shouldUseTransitions;\n\n\n      var componentStyle = _extends({}, style, {\n        height: height,\n        overflow: overflow || style.overflow\n      });\n\n      if (shouldUseTransitions && applyInlineTransitions) {\n        componentStyle.transition = 'height ' + duration + 'ms ' + easing + ' ' + delay + 'ms';\n\n        // Include transition passed through styles\n        if (style.transition) {\n          componentStyle.transition = style.transition + ', ' + componentStyle.transition;\n        }\n\n        // Add webkit vendor prefix still used by opera, blackberry...\n        componentStyle.WebkitTransition = componentStyle.transition;\n      }\n\n      var contentStyle = {};\n\n      if (animateOpacity) {\n        contentStyle.transition = 'opacity ' + duration + 'ms ' + easing + ' ' + delay + 'ms';\n        // Add webkit vendor prefix still used by opera, blackberry...\n        contentStyle.WebkitTransition = contentStyle.transition;\n\n        if (height === 0) {\n          contentStyle.opacity = 0;\n        }\n      }\n\n      var componentClasses = (0, _classnames2.default)((_cx3 = {}, _defineProperty(_cx3, animationStateClasses, true), _defineProperty(_cx3, className, className), _cx3));\n\n      return _react2.default.createElement(\n        'div',\n        _extends({}, omit.apply(undefined, [this.props].concat(PROPS_TO_OMIT)), {\n          'aria-hidden': height === 0,\n          className: componentClasses,\n          style: componentStyle\n        }),\n        _react2.default.createElement(\n          'div',\n          {\n            className: contentClassName,\n            style: contentStyle,\n            ref: function ref(el) {\n              return _this3.contentElement = el;\n            }\n          },\n          children\n        )\n      );\n    }\n  }]);\n\n  return AnimateHeight;\n}(_react2.default.Component);\n\nvar heightPropType = function heightPropType(props, propName, componentName) {\n  var value = props[propName];\n\n  if (typeof value === 'number' && value >= 0 || isPercentage(value) || value === 'auto') {\n    return null;\n  }\n\n  return new TypeError('value \"' + value + '\" of type \"' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + '\" is invalid type for ' + propName + ' in ' + componentName + '. ' + 'It needs to be a positive number, string \"auto\" or percentage string (e.g. \"15%\").');\n};\n\nAnimateHeight.propTypes = {\n  animateOpacity: _propTypes2.default.bool,\n  animationStateClasses: _propTypes2.default.object,\n  applyInlineTransitions: _propTypes2.default.bool,\n  children: _propTypes2.default.any.isRequired,\n  className: _propTypes2.default.string,\n  contentClassName: _propTypes2.default.string,\n  duration: _propTypes2.default.number,\n  delay: _propTypes2.default.number,\n  easing: _propTypes2.default.string,\n  height: heightPropType,\n  onAnimationEnd: _propTypes2.default.func,\n  onAnimationStart: _propTypes2.default.func,\n  style: _propTypes2.default.object\n};\n\nAnimateHeight.defaultProps = {\n  animateOpacity: false,\n  animationStateClasses: ANIMATION_STATE_CLASSES,\n  applyInlineTransitions: true,\n  duration: 250,\n  delay: 0,\n  easing: 'ease',\n  style: {}\n};\n\nexports.default = AnimateHeight;","// @flow\nimport * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconAddMetadataEmptyState = ({ className = '', color = '#0061D5', title, width = 140 }: Props) => (\n    <AccessibleSVG\n        className={`icon-add-metadata-empty-state ${className}`}\n        title={title}\n        viewBox=\"0 0 140 105\"\n        width={width}\n    >\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n                d=\"M92 1.134V.492a.501.501 0 0 1 1-.002v.644c.152.088.278.214.366.366h.644a.5.5 0 0 1 .49.5c0 .276-.215.5-.49.5h-.644a1.005 1.005 0 0 1-.366.366v.644a.5.5 0 0 1-.5.49.506.506 0 0 1-.5-.505v-.629a1.005 1.005 0 0 1-.366-.366h-.644a.5.5 0 0 1-.49-.5c0-.276.215-.5.49-.5h.644c.088-.152.214-.278.366-.366zm-90.5 83.5v-.642a.501.501 0 0 1 1-.002v.644c.152.088.278.214.366.366h.644a.5.5 0 0 1 .49.5c0 .276-.215.5-.49.5h-.644a1.005 1.005 0 0 1-.366.366v.644a.5.5 0 0 1-.5.49.506.506 0 0 1-.5-.505v-.629A1.005 1.005 0 0 1 1.134 86H.49a.5.5 0 0 1-.49-.5c0-.276.215-.5.49-.5h.644c.088-.152.214-.278.366-.366zm136 5.5v-.642a.501.501 0 0 1 1-.002v.644c.152.088.278.214.366.366h.644a.5.5 0 0 1 .49.5c0 .276-.215.5-.49.5h-.644a1.005 1.005 0 0 1-.366.366v.644a.5.5 0 0 1-.5.49.506.506 0 0 1-.5-.505v-.629a1.005 1.005 0 0 1-.366-.366h-.644a.5.5 0 0 1-.49-.5c0-.276.215-.5.49-.5h.644c.088-.152.214-.278.366-.366zm-29-78v-.642a.501.501 0 0 1 1-.002v.644c.152.088.278.214.366.366h.644a.5.5 0 0 1 .49.5c0 .276-.215.5-.49.5h-.644a1.005 1.005 0 0 1-.366.366v.644a.5.5 0 0 1-.5.49.506.506 0 0 1-.5-.505v-.629a1.005 1.005 0 0 1-.366-.366h-.644a.5.5 0 0 1-.49-.5c0-.276.215-.5.49-.5h.644c.088-.152.214-.278.366-.366zm-80 3.5v-.642a.501.501 0 0 1 1-.002v.644c.152.088.278.214.366.366h.644a.5.5 0 0 1 .49.5c0 .276-.215.5-.49.5h-.644a1.005 1.005 0 0 1-.366.366v.644a.5.5 0 0 1-.5.49.506.506 0 0 1-.5-.505v-.629a1.005 1.005 0 0 1-.366-.366h-.644a.5.5 0 0 1-.49-.5c0-.276.215-.5.49-.5h.644c.088-.152.214-.278.366-.366zm-5.563 8.075v-.402a.313.313 0 0 1 .625 0v.402a.628.628 0 0 1 .23.229h.401c.17 0 .307.144.307.312a.308.308 0 0 1-.307.313h-.402a.628.628 0 0 1-.229.228v.402a.313.313 0 0 1-.625.004v-.406a.628.628 0 0 1-.228-.229h-.402A.313.313 0 0 1 22 24.25c0-.173.134-.313.307-.313h.402a.628.628 0 0 1 .229-.228zm-11.5 79v-.402a.313.313 0 0 1 .626 0v.402a.628.628 0 0 1 .228.228h.402c.17 0 .307.145.307.313a.308.308 0 0 1-.307.313h-.402a.628.628 0 0 1-.229.228v.402a.313.313 0 0 1-.624.004v-.406a.628.628 0 0 1-.23-.228h-.401a.313.313 0 0 1-.307-.313c0-.173.134-.313.307-.313h.402a.628.628 0 0 1 .229-.228z\"\n                fill={color}\n            />\n            <path\n                d=\"M17 54c0-3.866 3.133-7 6.992-7h106.016c3.861 0 6.992 3.142 6.992 7 0 3.866-3.133 7-6.992 7H23.992C20.131 61 17 57.858 17 54zm-6 20c0-3.866 3.133-7 6.992-7h106.016c3.861 0 6.992 3.142 6.992 7 0 3.866-3.133 7-6.992 7H17.992C14.131 81 11 77.858 11 74zM5 94c0-3.866 3.133-7 6.992-7h106.016c3.861 0 6.992 3.142 6.992 7 0 3.866-3.133 7-6.992 7H11.992C8.131 101 5 97.858 5 94z\"\n                fill={color}\n                fillOpacity=\".1\"\n            />\n            <path\n                d=\"M130 61a7 7 0 1 1 0-14 7 7 0 0 1 0 14zm-6 20a7 7 0 1 1 0-14 7 7 0 0 1 0 14zm0-2a5 5 0 1 0 0-10 5 5 0 0 0 0 10zm-6 22a7 7 0 1 1 0-14 7 7 0 0 1 0 14z\"\n                fill={color}\n            />\n            <path\n                d=\"M117.944 95.189l3.215-3.832a.996.996 0 0 1 1.407-.121c.423.355.475.99.126 1.406l-3.861 4.6a.993.993 0 0 1-1.4.128l-3.078-2.583a.993.993 0 0 1-.116-1.403 1 1 0 0 1 1.401-.13l2.306 1.935zm12-40l3.215-3.832a.996.996 0 0 1 1.407-.121c.423.355.475.99.126 1.406l-3.861 4.6a.993.993 0 0 1-1.4.128l-3.078-2.583a.993.993 0 0 1-.116-1.403 1 1 0 0 1 1.401-.13l2.306 1.935z\"\n                fill=\"#FFF\"\n            />\n            <path\n                d=\"M25 38.49c0-.823.668-1.49 1.509-1.49H54.77c.833 0 1.788.605 2.139 1.365l3.207 6.942c.348.754-.036 1.365-.86 1.365H26.491c-.824 0-1.491-.665-1.491-1.49V38.49z\"\n                fill=\"#FFF\"\n                stroke={color}\n                strokeWidth=\"2\"\n            />\n            <path\n                d=\"M27 40.49c0-.823.668-1.49 1.494-1.49h25.164c.825 0 1.751.62 2.07 1.386l2.869 6.9c.318.766-.096 1.386-.933 1.386H28.51A1.498 1.498 0 0 1 27 47.182V40.49z\"\n                fill=\"#22A7F0\"\n                fillOpacity=\".1\"\n            />\n            <rect fill=\"#FFF\" height=\"53.197\" rx=\"1.5\" stroke={color} strokeWidth=\"2\" width=\"80\" x=\"25\" y=\"43\" />\n            <path\n                d=\"M27 82.214c0-.827.657-1.34 1.475-1.185 0 0 3.614 1.268 23.858 1.268 12.585 0 18.165 3.312 25.334 3.312 14.499 0 23.954-4.331 23.954-4.331.762-.31 1.379.115 1.379.936v10.284c0 .827-.68 1.497-1.501 1.497H28.501A1.503 1.503 0 0 1 27 92.498V82.214z\"\n                fill={color}\n                fillOpacity=\".1\"\n            />\n        </g>\n    </AccessibleSVG>\n);\n\nexport default IconAddMetadataEmptyState;\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport IconAddMetadataEmptyState from '../../icons/general/IconAddMetadataEmptyState';\n\nimport messages from './messages';\nimport './EmptyContent.scss';\n\ntype Props = {\n    canAdd?: boolean,\n};\n\nconst EmptyContent = ({ canAdd }: Props) => (\n    <div className=\"metadata-instance-editor-no-instances\">\n        <IconAddMetadataEmptyState />\n        <p className=\"metadata-instance-editor-no-instances--call-out\">\n            <FormattedMessage {...messages.noMetadata} />\n        </p>\n        {canAdd && (\n            <p className=\"metadata-instance-editor-no-instances--how-add-template\">\n                <FormattedMessage {...messages.noMetadataAddTemplate} />\n            </p>\n        )}\n    </div>\n);\n\nexport default EmptyContent;\n","// @flow\nimport * as React from 'react';\n\nimport { bdlBoxBlue, bdlPurpleRain } from '../../styles/variables';\nimport AccessibleSVG from '../accessible-svg';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    title?: string | React.Element<any>,\n    type?: 'cascade' | 'default',\n    width?: number,\n};\n\nconst IconMetadataColored = ({ className = '', color, title, type, width = 16, height = 16 }: Props) => {\n    let fill;\n\n    if (color) {\n        fill = color;\n    } else if (type === 'cascade') {\n        fill = bdlPurpleRain;\n    } else if (type === 'default') {\n        fill = bdlBoxBlue;\n    } else {\n        fill = bdlBoxBlue;\n    }\n\n    return (\n        <AccessibleSVG\n            className={`icon-metadata ${className}`}\n            height={height}\n            title={title}\n            viewBox=\"0 0 16 16\"\n            width={width}\n        >\n            <path\n                className=\"fill-color\"\n                d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm-2.515-5.879L6.2 7.263l1.376 2.202a.5.5 0 0 0 .848 0L9.8 7.263l.715 2.858a.5.5 0 0 0 .97-.242l-1-4a.5.5 0 0 0-.909-.144L8 8.257 6.424 5.735a.5.5 0 0 0-.91.144l-1 4a.5.5 0 0 0 .971.242z\"\n                fill={fill}\n                fillRule=\"evenodd\"\n            />\n        </AccessibleSVG>\n    );\n};\n\nexport default IconMetadataColored;\n","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport './Toggle.scss';\n\ntype Props = {\n    className?: string,\n    /** Description of the input */\n    description?: React.Node,\n    isDisabled?: boolean, // @TODO: eventually call this `disabled`\n    /** Toggle state */\n    isOn?: boolean, // @TODO: eventually call this `checked`\n    /** If set to true, the toggle will be aligned to the right */\n    isToggleRightAligned?: boolean,\n    /** Label displayed for the input */\n    label: React.Node,\n    /** Name of the input */\n    name?: string,\n    /** blur callback function called with event as the argument */\n    onBlur?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** change callback function called with event as the argument */\n    onChange?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** optional value for the toggles checkbox */\n    value?: any,\n};\n\nconst Toggle = ({\n    className = '',\n    description,\n    isDisabled,\n    isOn,\n    isToggleRightAligned = false,\n    label,\n    name,\n    onBlur,\n    onChange,\n    ...rest\n}: Props) => {\n    const classes = classNames('toggle-container', className, {\n        'is-toggle-right-aligned': isToggleRightAligned,\n    });\n    let toggleElements = [\n        <div key=\"toggle-simple-switch\" className=\"toggle-simple-switch\" />,\n        <div key=\"toggle-simple-label\" className=\"toggle-simple-label\">\n            {label}\n        </div>,\n    ];\n\n    if (isToggleRightAligned) {\n        toggleElements = toggleElements.reverse();\n    }\n\n    return (\n        <div className={classes}>\n            {/* eslint-disable-next-line jsx-a11y/label-has-for */}\n            <label className=\"toggle-simple\">\n                <input\n                    checked={isOn}\n                    className=\"toggle-simple-input\"\n                    disabled={isDisabled}\n                    name={name}\n                    onBlur={onBlur}\n                    onChange={onChange}\n                    type=\"checkbox\"\n                    {...rest}\n                />\n                {toggleElements}\n            </label>\n            {description ? <div className=\"toggle-simple-description\">{description}</div> : null}\n        </div>\n    );\n};\n\nexport type ToggleProps = Props;\nexport default Toggle;\n","// @flow\n\nimport * as React from 'react';\nimport type { FieldProps } from 'formik';\n\nimport TogglePrimitive from './Toggle';\nimport type { ToggleProps } from './Toggle';\n\ntype Props = ToggleProps & FieldProps;\n\nconst ToggleField = ({ field, form, ...rest }: Props) => {\n    const { value } = field;\n    return <TogglePrimitive {...field} {...rest} isOn={!!value} />;\n};\n\nexport default ToggleField;\n","// @flow\nimport * as React from 'react';\n\nimport RadioButton from './RadioButton';\n\ntype Props = {\n    children: React.Node,\n    className: string,\n    name?: string,\n    onChange?: Function,\n    value?: string,\n};\n\ntype State = {\n    value?: string,\n};\n\nclass RadioGroup extends React.Component<Props, State> {\n    static defaultProps = {\n        className: '',\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            value: props.value,\n        };\n    }\n\n    // @TODO: think about adding componentDidUpdate or gDSFP\n    // to update the internal state value based on new props value\n\n    onChangeHandler = (event: SyntheticEvent<>) => {\n        const { target } = event;\n        const { onChange } = this.props;\n\n        if (target instanceof HTMLInputElement) {\n            this.setState({\n                value: target.value,\n            });\n        }\n\n        if (onChange) {\n            onChange(event);\n        }\n    };\n\n    render() {\n        const { children, className, name } = this.props;\n        const { value: stateValue } = this.state;\n\n        return (\n            <div className={`radio-group ${className}`} onChange={this.onChangeHandler}>\n                {React.Children.map(children, radio => {\n                    const { value, ...rest } = radio.props;\n\n                    return <RadioButton isSelected={value === stateValue} name={name} value={value} {...rest} />;\n                })}\n            </div>\n        );\n    }\n}\n\nexport type RadioGroupProps = Props;\nexport default RadioGroup;\n","// @flow\n\nimport * as React from 'react';\nimport type { FieldProps } from 'formik';\n\nimport RadioGroupPrimitive from './RadioGroup';\nimport type { RadioGroupProps } from './RadioGroup';\n\ntype Props = RadioGroupProps & FieldProps;\n\nconst RadioGroupField = ({ field, form, ...rest }: Props) => {\n    const { value } = field;\n    return <RadioGroupPrimitive key={value} {...field} {...rest} />;\n};\n\nexport default RadioGroupField;\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Toggle from '../../components/toggle';\nimport { RadioButton, RadioGroup } from '../../components/radio';\nimport Link from '../../components/link/Link';\nimport IconAlertDefault from '../../icons/general/IconAlertDefault';\nimport messages from './messages';\nimport './CascadePolicy.scss';\n\nconst COMMUNITY_LINK = 'https://community.box.com/t5/Organizing-and-Tracking-Content/Metadata/ta-p/30765';\n\ntype Props = {\n    canEdit: boolean,\n    isCascadingEnabled: boolean,\n    isCascadingOverwritten: boolean,\n    isCustomMetadata: boolean,\n    onCascadeModeChange: (value: boolean) => void,\n    onCascadeToggle: (value: boolean) => void,\n    shouldShowCascadeOptions: boolean,\n};\n\nconst CascadePolicy = ({\n    canEdit,\n    isCascadingEnabled,\n    isCascadingOverwritten,\n    isCustomMetadata,\n    onCascadeToggle,\n    onCascadeModeChange,\n    shouldShowCascadeOptions,\n}: Props) => {\n    const readOnlyState = isCascadingEnabled ? (\n        <div className=\"metadata-cascade-notice\">\n            <FormattedMessage {...messages.metadataCascadePolicyEnabledInfo} />\n        </div>\n    ) : null;\n\n    return canEdit ? (\n        <>\n            <div className=\"metadata-cascade-editor\">\n                <div className=\"metadata-cascade-enable\">\n                    <div>\n                        <FormattedMessage tagName=\"strong\" {...messages.enableCascadePolicy} />\n                        {!isCustomMetadata && (\n                            <Toggle\n                                className={`metadata-cascade-toggle ${\n                                    isCascadingEnabled ? 'cascade-on' : 'cascade-off'\n                                }`}\n                                isOn={isCascadingEnabled}\n                                label=\"\"\n                                onChange={e => onCascadeToggle(e.target.checked)}\n                            />\n                        )}\n                    </div>\n                    {!isCustomMetadata ? (\n                        <div className=\"cascade-policy-text\">\n                            <FormattedMessage {...messages.applyCascadePolicyText} />\n                            &nbsp;\n                            <Link className=\"cascade-policy-learnmore-link\" href={COMMUNITY_LINK} target=\"_blank\">\n                                <FormattedMessage {...messages.cascadePolicyLearnMore} />\n                            </Link>\n                        </div>\n                    ) : (\n                        <div>\n                            <FormattedMessage {...messages.cannotApplyCascadePolicyText} />\n                        </div>\n                    )}\n                </div>\n            </div>\n            {shouldShowCascadeOptions && (\n                <div className=\"metadata-cascade-editor\">\n                    <div className=\"metadata-cascading-mode\">\n                        <FormattedMessage {...messages.cascadePolicyModeQuestion} />\n\n                        <div className=\"metadata-operation-not-immediate\">\n                            <IconAlertDefault />\n                            <span>\n                                <FormattedMessage {...messages.operationNotImmediate} />\n                            </span>\n                        </div>\n                        <RadioGroup\n                            className=\"metadata-cascading-options\"\n                            onChange={e => onCascadeModeChange(e.target.value === 'overwrite')}\n                            value={isCascadingOverwritten ? 'overwrite' : 'skip'}\n                        >\n                            <RadioButton\n                                label={<FormattedMessage {...messages.cascadePolicySkipMode} />}\n                                value=\"skip\"\n                            />\n                            <RadioButton\n                                label={<FormattedMessage {...messages.cascadePolicyOverwriteMode} />}\n                                value=\"overwrite\"\n                            />\n                        </RadioGroup>\n                    </div>\n                </div>\n            )}\n        </>\n    ) : (\n        readOnlyState\n    );\n};\n\nexport default CascadePolicy;\n","// @flow\n\nconst isHidden = (obj: MetadataTemplate | MetadataTemplateField): boolean => {\n    return !!obj.isHidden || !!obj.hidden;\n};\n\n/**\n * Utility function for converting a string or array of strings into a Set object\n * @param templateFilters - Array<string> | string\n * @returns {Set<T>}\n */\nconst normalizeTemplateFilters = (templateFilters: Array<string> | string): Set<string> => {\n    return typeof templateFilters === 'string' ? new Set([templateFilters]) : new Set(templateFilters);\n};\n\n/**\n * Utility function for cloning an array of metadata templates and filtering the templates and fields if necessary\n * @param templates Array<MetadataTemplate>\n * @param selectedTemplateKey - string\n * @param templateFilters - Array<string> | string\n * @returns {Array<T>}\n */\nconst normalizeTemplates = (\n    templates: Array<MetadataTemplate>,\n    selectedTemplateKey?: string,\n    templateFilters?: Array<string> | string,\n): Array<MetadataTemplate> => {\n    if (!selectedTemplateKey) {\n        return [...templates];\n    }\n    const clonedTemplates = templates.filter(template => template.templateKey === selectedTemplateKey);\n    const fields = clonedTemplates[0] ? clonedTemplates[0].fields : null;\n    if (templateFilters && fields) {\n        const normalizedFilters = normalizeTemplateFilters(templateFilters);\n        clonedTemplates[0].fields = fields.filter(field => normalizedFilters.has(field.id));\n    }\n    return clonedTemplates;\n};\n\nexport { isHidden, normalizeTemplates, normalizeTemplateFilters };\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Field from './fields/Field';\nimport messages from './messages';\nimport { isHidden } from './metadataUtil';\nimport './TemplatedInstance.scss';\n\ntype Props = {\n    canEdit: boolean,\n    data: MetadataFields,\n    errors: { [string]: React.Node },\n    onFieldChange?: (key: string, value: MetadataFieldValue, type: string) => void,\n    onFieldRemove?: (key: string) => void,\n    template: MetadataTemplate,\n};\n\nconst TemplatedInstance = ({ canEdit, data = {}, errors, onFieldChange, onFieldRemove, template }: Props) => {\n    const { fields = [] } = template;\n    const hasFields = fields.length > 0;\n    const hasVisibleFields = hasFields && fields.some(field => !isHidden(field));\n    const showNoFieldsMessage = !hasFields;\n    const showHiddenFieldsMessage = hasFields && !hasVisibleFields;\n\n    return (\n        <>\n            {hasVisibleFields &&\n                fields.map(field => (\n                    <Field\n                        key={field.id}\n                        canEdit={canEdit}\n                        dataKey={field.key}\n                        dataValue={data[field.key]}\n                        description={field.description}\n                        displayName={field.displayName}\n                        error={errors[field.key]}\n                        isHidden={isHidden(field)} // Checking both isHidden and hidden attributes due to differences in V2 and V3 APIs\n                        onChange={(key: string, value: MetadataFieldValue) => {\n                            if (canEdit && onFieldChange) {\n                                onFieldChange(key, value, field.type);\n                            }\n                        }}\n                        onRemove={(key: string) => {\n                            if (canEdit && onFieldRemove) {\n                                onFieldRemove(key);\n                            }\n                        }}\n                        options={field.options}\n                        type={field.type}\n                    />\n                ))}\n            {showHiddenFieldsMessage && (\n                <div className=\"attributes-hidden-message\">\n                    <FormattedMessage {...messages.allAttributesAreHidden} />\n                </div>\n            )}\n            {showNoFieldsMessage && (\n                <div className=\"no-attributes-message\">\n                    <FormattedMessage {...messages.noAttributesForTemplate} />\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default TemplatedInstance;\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport Button from '../../components/button/Button';\nimport TextInput from '../../components/text-input/TextInput';\nimport Tooltip from '../../components/tooltip/Tooltip';\nimport commonMessages from '../../common/messages';\nimport IconInfo from '../../icons/general/IconInfo';\n\nimport messages from './messages';\nimport './CustomInstanceNewField.scss';\n\ntype Props = {\n    intl: any,\n    isCancellable: boolean,\n    onAdd: (key: string, value: MetadataFieldValue) => void,\n    onCancel: () => void,\n    properties: MetadataFields,\n};\n\ntype State = {\n    error: React.Node,\n    key: string,\n    value: string,\n};\n\nclass CustomInstanceNewField extends React.PureComponent<Props, State> {\n    state: State = {\n        key: '',\n        value: '',\n        error: '',\n    };\n\n    /**\n     * Common change handler\n     *\n     * @param {Event} event - keyboard event\n     * @param {string} attr - key or value\n     * @return {void}\n     */\n    onChange(event: SyntheticKeyboardEvent<HTMLInputElement>, attr: string) {\n        const currentTarget = (event.currentTarget: HTMLInputElement);\n        this.setState({\n            error: '',\n            [attr]: currentTarget.value,\n        });\n    }\n\n    /**\n     * Change handler for the key\n     *\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onKeyChange = (event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n        this.onChange(event, 'key');\n    };\n\n    /**\n     * Change handler for the value\n     *\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onValueChange = (event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n        this.onChange(event, 'value');\n    };\n\n    /**\n     * Persists the new metadata added or shows an error\n     *\n     * @return {void}\n     */\n    onAdd = () => {\n        const { key, value }: State = this.state;\n        const { onAdd, properties }: Props = this.props;\n        if (Object.prototype.hasOwnProperty.call(properties, key)) {\n            this.setState({\n                error: <FormattedMessage {...messages.customErrorDuplicateKey} />,\n            });\n        } else if (key.startsWith('$')) {\n            this.setState({\n                error: <FormattedMessage {...messages.customErrorInternalKey} />,\n            });\n        } else if (key) {\n            onAdd(key, value);\n        } else {\n            this.setState({\n                error: <FormattedMessage {...messages.customErrorRequired} />,\n            });\n        }\n    };\n\n    render() {\n        const { intl, isCancellable, onCancel }: Props = this.props;\n        const { key, value, error }: State = this.state;\n        return (\n            <div className=\"custom-new-field\">\n                <div className=\"custom-new-field-header\">\n                    <FormattedMessage tagName=\"h5\" {...messages.customNewField} />\n                    <Tooltip text={<FormattedMessage {...messages.customNewFieldMessage} />}>\n                        <div tabIndex=\"-1\">\n                            <IconInfo color=\"#777\" height={18} width={18} />\n                        </div>\n                    </Tooltip>\n                </div>\n                <TextInput\n                    error={error}\n                    isRequired\n                    label={<FormattedMessage {...messages.customKey} />}\n                    onChange={this.onKeyChange}\n                    placeholder={intl.formatMessage(messages.customKeyPlaceholder)}\n                    type=\"text\"\n                    value={key}\n                />\n                <TextInput\n                    hideOptionalLabel\n                    label={<FormattedMessage {...messages.customValue} />}\n                    onChange={this.onValueChange}\n                    placeholder={intl.formatMessage(messages.customValuePlaceholder)}\n                    type=\"text\"\n                    value={value}\n                />\n                <div className=\"custom-new-field-actions\">\n                    {isCancellable && (\n                        <Button data-resin-target=\"metadata-customfieldcancel\" onClick={onCancel} type=\"button\">\n                            <FormattedMessage {...commonMessages.cancel} />\n                        </Button>\n                    )}\n                    <Button data-resin-target=\"metadata-customfieldadd\" onClick={this.onAdd} type=\"button\">\n                        <FormattedMessage {...messages.customAdd} />\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { CustomInstanceNewField as CustomInstanceNewFieldBase };\nexport default injectIntl(CustomInstanceNewField);\n","// @flow\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport Button from '../../../components/button/Button';\nimport ButtonGroup from '../../../components/button-group/ButtonGroup';\nimport IconMinus from '../../../icons/general/IconMinusThin';\nimport IconPlus from '../../../icons/general/IconPlusThin';\n\nimport Field from './Field';\nimport messages from '../messages';\nimport './CustomField.scss';\n\ntype Props = {\n    canEdit: boolean,\n    dataKey: string,\n    dataValue: MetadataFieldValue,\n    intl: any,\n    isLast: boolean,\n    onAdd: () => void,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n};\n\nconst COLOR_999 = '#999';\n\nconst CustomField = ({ intl, canEdit, isLast, dataKey, dataValue, onAdd, onChange, onRemove }: Props) => {\n    const addBtn = (\n        <Button\n            aria-label={intl.formatMessage(messages.customAdd)}\n            data-resin-target=\"metadata-customfieldnew\"\n            onClick={onAdd}\n            type=\"button\"\n        >\n            <IconPlus color={COLOR_999} />\n        </Button>\n    );\n\n    const removeBtn = (\n        <Button\n            aria-label={intl.formatMessage(messages.customRemove)}\n            data-resin-target=\"metadata-customfieldremove\"\n            onClick={() => {\n                if (onRemove) {\n                    onRemove(dataKey);\n                }\n            }}\n            type=\"button\"\n        >\n            <IconMinus color={COLOR_999} />\n        </Button>\n    );\n\n    return (\n        <div className=\"metadata-instance-editor-field-custom\">\n            {/* $FlowFixMe */}\n            <Field\n                canEdit={canEdit}\n                dataKey={dataKey}\n                dataValue={dataValue}\n                displayName={dataKey}\n                onChange={onChange}\n                // Custom metadata doesn't allow removing of props if the value is emptied out, leave it as empty string\n                onRemove={(key: string) => onChange(key, '')}\n                type=\"string\"\n            />\n            {canEdit && (\n                <div className=\"metadata-instance-editor-field-custom-actions\">\n                    {isLast ? (\n                        <ButtonGroup>\n                            {removeBtn}\n                            {addBtn}\n                        </ButtonGroup>\n                    ) : (\n                        removeBtn\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport { CustomField as CustomFieldBase };\nexport default injectIntl(CustomField);\n","// @flow\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\n\nimport CustomNewField from './CustomInstanceNewField';\nimport CustomField from './fields/CustomField';\nimport EmptyContent from './EmptyContent';\nimport { FIELD_TYPE_STRING } from './constants';\n\ntype Props = {\n    canEdit: boolean,\n    data: MetadataFields,\n    onFieldChange?: (key: string, value: MetadataFieldValue, type: string) => void,\n    onFieldRemove?: (key: string) => void,\n};\n\ntype State = {\n    isAddFieldVisible: boolean,\n    properties: MetadataFields,\n};\n\nclass CustomInstance extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        canEdit: true,\n        data: {},\n    };\n\n    static getDerivedStateFromProps({ data }: Props, { properties }: State): any {\n        if (!isEqual(data, properties)) {\n            return {\n                properties: { ...data },\n            };\n        }\n\n        return null;\n    }\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isAddFieldVisible: false,\n            properties: { ...props.data },\n        };\n    }\n\n    /**\n     * Adds/updates a new metadata key value pair\n     *\n     * @param {string} key - metadata key\n     * @param {string} value - metadata value\n     * @return {void}\n     */\n    onFieldChange = (key: string, value: MetadataFieldValue) => {\n        const { canEdit, onFieldChange }: Props = this.props;\n        if (canEdit && onFieldChange) {\n            onFieldChange(key, value, FIELD_TYPE_STRING);\n        }\n    };\n\n    /**\n     * Adds/updates a new metadata key value pair\n     *\n     * @param {string} key - metadata key\n     * @param {string} value - metadata value\n     * @return {void}\n     */\n    onFieldRemove = (key: string) => {\n        const { canEdit, onFieldRemove }: Props = this.props;\n        if (canEdit && onFieldRemove) {\n            onFieldRemove(key);\n        }\n    };\n\n    /**\n     * Shows the add new field field\n     *\n     * @return {void}\n     */\n    onAddFieldToggle = () => {\n        this.setState(prevState => ({\n            isAddFieldVisible: !prevState.isAddFieldVisible,\n        }));\n    };\n\n    render() {\n        const { canEdit }: Props = this.props;\n        const { isAddFieldVisible, properties }: State = this.state;\n        const fields = Object.keys(properties);\n        const canAddFields = canEdit && (isAddFieldVisible || fields.length === 0);\n\n        return (\n            <>\n                {fields.map((key, index) => (\n                    <CustomField\n                        key={key}\n                        canEdit={canEdit}\n                        dataKey={key}\n                        dataValue={properties[key]}\n                        isLast={!isAddFieldVisible && index === fields.length - 1}\n                        onAdd={this.onAddFieldToggle}\n                        onChange={this.onFieldChange}\n                        onRemove={this.onFieldRemove}\n                    />\n                ))}\n                {!canAddFields && fields.length === 0 && <EmptyContent />}\n                {canAddFields && (\n                    <CustomNewField\n                        isCancellable={fields.length !== 0}\n                        onAdd={this.onFieldChange}\n                        onCancel={this.onAddFieldToggle}\n                        properties={this.props.data}\n                    />\n                )}\n            </>\n        );\n    }\n}\n\nexport default CustomInstance;\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Button from '../../components/button/Button';\nimport PrimaryButton from '../../components/primary-button/PrimaryButton';\n\nimport messages from './messages';\n\nimport './MetadataInstanceConfirmDialog.scss';\n\ntype Props = {\n    confirmationMessage: string | React.Node,\n    onCancel: Function,\n    onConfirm: Function,\n};\n\nconst MetadataInstanceConfirmDialog = ({ onCancel, onConfirm, confirmationMessage }: Props) => (\n    <div className=\"metadata-instance-confirm-cover\">\n        <div className=\"metadata-instance-confim-container\">\n            <p className=\"metadata-instance-confirm-text\">{confirmationMessage}</p>\n            <div className=\"metadata-instance-confirm-buttons\">\n                <Button data-resin-target=\"metadata-confirmcancel\" onClick={onCancel} type=\"button\">\n                    <FormattedMessage {...messages.metadataCancel} />\n                </Button>\n                <PrimaryButton data-resin-target=\"metadata-confirmremove\" onClick={onConfirm} type=\"button\">\n                    <FormattedMessage {...messages.customRemove} />\n                </PrimaryButton>\n            </div>\n        </div>\n    </div>\n);\n\nexport default MetadataInstanceConfirmDialog;\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Button from '../../components/button/Button';\nimport PlainButton from '../../components/plain-button/PlainButton';\nimport PrimaryButton from '../../components/primary-button/PrimaryButton';\n\nimport messages from './messages';\nimport './Footer.scss';\n\ntype Props = {\n    onCancel: () => void,\n    onRemove: () => void,\n    showSave: boolean,\n};\n\nconst Footer = ({ onCancel, onRemove, showSave }: Props) => (\n    <div className=\"metadata-instance-editor-footer\">\n        <div className=\"metadata-instance-editor-footer-delete\">\n            <PlainButton data-resin-target=\"metadata-instanceremove\" onClick={onRemove} type=\"button\">\n                <FormattedMessage {...messages.metadataRemoveTemplate} />\n            </PlainButton>\n        </div>\n        <div className=\"metadata-instance-editor-footer-save-cancel\">\n            <Button data-resin-target=\"metadata-instancecancel\" onClick={onCancel} type=\"button\">\n                <FormattedMessage {...messages.metadataCancel} />\n            </Button>\n            {showSave && (\n                <PrimaryButton data-resin-target=\"metadata-instancesave\">\n                    <FormattedMessage {...messages.metadataSave} />\n                </PrimaryButton>\n            )}\n        </div>\n    </div>\n);\n\nexport default Footer;\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport isEqual from 'lodash/isEqual';\nimport cloneDeep from 'lodash/cloneDeep';\nimport noop from 'lodash/noop';\n\nimport Collapsible from '../../components/collapsible/Collapsible';\nimport Form from '../../components/form-elements/form/Form';\nimport LoadingIndicatorWrapper from '../../components/loading-indicator/LoadingIndicatorWrapper';\nimport PlainButton from '../../components/plain-button/PlainButton';\nimport Tooltip from '../../components/tooltip';\nimport IconMetadataColored from '../../icons/general/IconMetadataColored';\nimport IconAlertCircle from '../../icons/general/IconAlertCircle';\nimport IconEdit from '../../icons/general/IconEdit';\nimport { bdlWatermelonRed } from '../../styles/variables';\nimport { scrollIntoView } from '../../utils/dom';\n\nimport CascadePolicy from './CascadePolicy';\nimport TemplatedInstance from './TemplatedInstance';\nimport CustomInstance from './CustomInstance';\nimport MetadataInstanceConfirmDialog from './MetadataInstanceConfirmDialog';\nimport Footer from './Footer';\nimport messages from './messages';\nimport {\n    FIELD_TYPE_FLOAT,\n    FIELD_TYPE_INTEGER,\n    TEMPLATE_CUSTOM_PROPERTIES,\n    JSON_PATCH_OP_REMOVE,\n    JSON_PATCH_OP_ADD,\n    JSON_PATCH_OP_REPLACE,\n    JSON_PATCH_OP_TEST,\n} from './constants';\nimport { isValidValue } from './fields/validateField';\nimport { isHidden } from './metadataUtil';\nimport { RESIN_TAG_TARGET } from '../../common/variables';\nimport './Instance.scss';\n\ntype Props = {\n    canEdit: boolean,\n    cascadePolicy?: MetadataCascadePolicy, // eslint-disable-line\n    data: MetadataFields,\n    hasError: boolean,\n    id: string,\n    isCascadingPolicyApplicable?: boolean,\n    isDirty: boolean,\n    isOpen: boolean,\n    onModification?: (id: string, isDirty: boolean, type?: string) => void,\n    onRemove?: (id: string) => void,\n    onSave?: (\n        id: string,\n        data: JSONPatchOperations,\n        cascadingPolicy?: MetadataCascadingPolicyData,\n        rawData: Object,\n    ) => void,\n    template: MetadataTemplate,\n};\n\ntype State = {\n    data: Object,\n    errors: { [string]: React.Node },\n    isBusy: boolean,\n    isCascadingEnabled: boolean,\n    isCascadingOverwritten: boolean,\n    isEditing: boolean,\n    shouldConfirmRemove: boolean,\n    shouldShowCascadeOptions: boolean,\n};\n\nconst createFieldKeyToTypeMap = (fields?: Array<MetadataTemplateField> = []) =>\n    fields.reduce((prev, { key, type }) => {\n        prev[key] = type;\n        return prev;\n    }, {});\n\nconst getValue = (data: Object, key: string, type: string) => {\n    const value = data[key];\n\n    switch (type) {\n        case FIELD_TYPE_FLOAT:\n            return parseFloat(value);\n\n        case FIELD_TYPE_INTEGER:\n            return parseInt(value, 10);\n\n        default:\n            return value;\n    }\n};\n\nclass Instance extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        data: {},\n        isDirty: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.state = this.getState(props);\n        this.fieldKeyToTypeMap = createFieldKeyToTypeMap(props.template.fields);\n    }\n\n    componentDidUpdate({ hasError: prevHasError, isDirty: prevIsDirty }: Props, prevState: State): void {\n        const currentElement = this.collapsibleRef.current;\n        const { hasError, isDirty }: Props = this.props;\n        const { isEditing }: State = prevState;\n\n        if (currentElement && this.state.shouldConfirmRemove) {\n            scrollIntoView(currentElement, {\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n\n        if (hasError && hasError !== prevHasError) {\n            // If hasError is true, which means an error occurred while\n            // doing a network operation and hence hide the busy indicator\n            // Saving also disables isEditing, so need to enable that back.\n            // isDirty remains as it was before.\n            this.setState({ isBusy: false, isEditing: true });\n        } else if (prevIsDirty && !isDirty) {\n            // If the form was dirty and now its not dirty\n            // we know a successful save may have happened.\n            // We don't modify isEditing here because we maintain the\n            // prior state for that. If we came here from a save\n            // success then save already disabled isEditing.\n            if (isEditing) {\n                // We are still editing so don't reset it\n                this.setState({ isBusy: false });\n            } else {\n                // For a successfull save we reset cascading overwrite radio\n                this.setState({ isBusy: false, isCascadingOverwritten: false });\n            }\n        }\n    }\n\n    /**\n     * Undo any changes made\n     *\n     * @return {void}\n     */\n    onCancel = (): void => {\n        const { id, onModification }: Props = this.props;\n        this.setState(this.getState(this.props));\n\n        // Callback to parent to tell that something is dirty\n        if (onModification) {\n            onModification(id, false);\n        }\n    };\n\n    /**\n     * Allows a user to confirm metadata instance removal\n     *\n     * @return {void}\n     */\n    onConfirmRemove = (): void => {\n        this.setState({ shouldConfirmRemove: true });\n    };\n\n    /**\n     * Cancel the remove instance attempt\n     *\n     * @return {void}\n     */\n    onConfirmCancel = (): void => {\n        this.setState({ shouldConfirmRemove: false });\n    };\n\n    /**\n     * Removes an instance\n     *\n     * @return {void}\n     */\n    onRemove = (): void => {\n        if (!this.isEditing()) {\n            return;\n        }\n\n        const { id, onRemove }: Props = this.props;\n        if (onRemove) {\n            onRemove(id);\n            this.setState({ isBusy: true });\n        }\n    };\n\n    /**\n     * Saves instance data\n     *\n     * @return {void}\n     */\n    onSave = (): void => {\n        const {\n            cascadePolicy,\n            data: originalData,\n            id,\n            isDirty,\n            isCascadingPolicyApplicable,\n            onSave,\n        }: Props = this.props;\n        const { data: currentData, errors, isCascadingEnabled, isCascadingOverwritten }: State = this.state;\n\n        if (!this.isEditing() || !isDirty || !onSave || Object.keys(errors).length) {\n            return;\n        }\n\n        this.setState({\n            isBusy: true,\n            isEditing: false,\n            shouldShowCascadeOptions: false,\n        });\n        onSave(\n            id,\n            this.createJSONPatch(currentData, originalData),\n            isCascadingPolicyApplicable\n                ? {\n                      canEdit: cascadePolicy ? cascadePolicy.canEdit : false,\n                      id: cascadePolicy ? cascadePolicy.id : undefined,\n                      isEnabled: isCascadingEnabled,\n                      overwrite: isCascadingOverwritten,\n                  }\n                : undefined,\n            cloneDeep(currentData),\n        );\n    };\n\n    /**\n     * Updates a key value in the instance data\n     *\n     * @param {string} key - key to update\n     * @param {FieldValue} value - value to update\n     * @param {string} type - type of field\n     * @return {void}\n     */\n    onFieldChange = (key: string, value: MetadataFieldValue, type: string): void => {\n        const { data, errors }: State = this.state;\n\n        // Don't do anything if data is the same or not in edit mode\n        if (!this.isEditing() || isEqual(data[key], value)) {\n            return;\n        }\n\n        const isValid = isValidValue(type, value);\n        const finalErrors = { ...errors };\n        const finalData = cloneDeep(data);\n        finalData[key] = value;\n\n        if (isValid) {\n            delete finalErrors[key];\n        } else {\n            finalErrors[key] = <FormattedMessage {...messages.invalidInput} />;\n        }\n\n        this.setState({ data: finalData, errors: finalErrors }, () => {\n            this.setDirty(type);\n        });\n    };\n\n    /**\n     * Removes a key from instance data\n     *\n     * @param {string} key - key to remove\n     * @return {void}\n     */\n    onFieldRemove = (key: string): void => {\n        if (!this.isEditing()) {\n            return;\n        }\n\n        const { data, errors }: State = this.state;\n        const finalData = cloneDeep(data);\n        const finalErrors = { ...errors };\n        delete finalData[key];\n        delete finalErrors[key];\n        this.setState({ data: finalData, errors: finalErrors }, this.setDirty);\n    };\n\n    /**\n     * Toggle cascading policy\n     *\n     * @param {boolean} value - true when turned on\n     * @return {void}\n     */\n    onCascadeToggle = (value: boolean) => {\n        const { isCascadingPolicyApplicable }: Props = this.props;\n        if (!isCascadingPolicyApplicable) {\n            return;\n        }\n\n        this.setState(\n            {\n                isCascadingEnabled: value,\n                shouldShowCascadeOptions: value,\n            },\n            this.setDirty,\n        );\n    };\n\n    /**\n     * Changes the cascade mode.\n     * isCascadingOverwritten is slways false to start off.\n     *\n     * @param {boolean} value - true when overwrite policy is chosen\n     * @return {void}\n     */\n    onCascadeModeChange = (value: boolean): void => {\n        const { isCascadingPolicyApplicable }: Props = this.props;\n        if (!isCascadingPolicyApplicable) {\n            return;\n        }\n\n        this.setState(\n            {\n                isCascadingOverwritten: value,\n            },\n            this.setDirty,\n        );\n    };\n\n    /**\n     * Returns the state from props\n     *\n     * @return {Object} - react state\n     */\n    getState(props: Props): State {\n        return {\n            data: cloneDeep(props.data),\n            errors: {},\n            isBusy: false,\n            isCascadingEnabled: this.isCascadingEnabled(props),\n            isCascadingOverwritten: false,\n            isEditing: false,\n            shouldConfirmRemove: false,\n            shouldShowCascadeOptions: false,\n        };\n    }\n\n    /**\n     * Returns the card title with possible error mark\n     *\n     * @return {Object} - react title element\n     */\n    getTitle(): React.Node {\n        const { cascadePolicy = {}, hasError, isCascadingPolicyApplicable, template }: Props = this.props;\n        const isProperties = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES;\n\n        const type = isCascadingPolicyApplicable && cascadePolicy.id ? 'cascade' : 'default';\n\n        return (\n            <span className=\"metadata-instance-editor-instance-title\">\n                <IconMetadataColored type={type} />\n                <span\n                    className={classNames('metadata-instance-editor-instance-title-text', {\n                        'metadata-instance-editor-instance-has-error': hasError,\n                    })}\n                >\n                    {isProperties ? <FormattedMessage {...messages.customTitle} /> : template.displayName}\n                </span>\n                {hasError && <IconAlertCircle color={bdlWatermelonRed} />}\n            </span>\n        );\n    }\n\n    /**\n     * Render the correct delete message to show based on custom metadata and file/folder metadata\n     */\n    renderDeleteMessage = (isFile: boolean, template: Object) => {\n        let message;\n        const isProperties = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES;\n\n        if (isProperties) {\n            message = isFile ? 'fileMetadataRemoveCustomTemplateConfirm' : 'folderMetadataRemoveCustomTemplateConfirm';\n        } else {\n            message = isFile ? 'fileMetadataRemoveTemplateConfirm' : 'folderMetadataRemoveTemplateConfirm';\n        }\n\n        return (\n            <FormattedMessage\n                {...messages[message]}\n                values={{\n                    metadataName: template.displayName,\n                }}\n            />\n        );\n    };\n\n    /**\n     * Get the delete confirmation message base on the template key\n     */\n    getConfirmationMessage(): React.Node {\n        const { template, isCascadingPolicyApplicable }: Props = this.props;\n        const isFile = !isCascadingPolicyApplicable;\n        return this.renderDeleteMessage(isFile, template);\n    }\n\n    /**\n     * Evaluates if the metadata was changed or cascading policy\n     * altered or enabled.\n     *\n     * @return {void}\n     */\n    setDirty = (type?: string): void => {\n        const { id, isCascadingPolicyApplicable, onModification }: Props = this.props;\n        const { data, isCascadingEnabled, isCascadingOverwritten } = this.state;\n        const hasDataChanged = !isEqual(data, this.props.data);\n        let hasCascadingChanged = false;\n\n        if (isCascadingPolicyApplicable) {\n            // isCascadingOverwritten always starts out as false, so true signifies a change\n            hasCascadingChanged = isCascadingOverwritten || isCascadingEnabled !== this.isCascadingEnabled(this.props);\n        }\n\n        // Callback to parent to tell that something is dirty\n        if (onModification) {\n            onModification(id, hasDataChanged || hasCascadingChanged, type);\n        }\n    };\n\n    collapsibleRef: {\n        current: null | HTMLDivElement,\n    } = React.createRef();\n\n    fieldKeyToTypeMap: Object;\n\n    /**\n     * Determines if cascading policy is enabled based on\n     * whether it has an id or not.\n     *\n     * @param {Object} props - component props\n     * @return {boolean} true if cascading policy is enabled\n     */\n    isCascadingEnabled(props: Props) {\n        if (props.cascadePolicy) {\n            return !!props.cascadePolicy.id;\n        }\n        return false;\n    }\n\n    /**\n     * Toggles the edit mode\n     *\n     * @private\n     * @return {void}\n     */\n    toggleIsEditing = (): void => {\n        this.setState(prevState => ({\n            isEditing: !prevState.isEditing,\n        }));\n    };\n\n    /**\n     * Creates JSON Patch operations from the passed in\n     * data while comparing it to the original data from props.\n     *\n     * Only diffs at the root level and primitives.\n     *\n     * @param {*} currentData - the latest changes by the user\n     * @param {*} originalData - the original values\n     * @return {Array} - JSON patch operations\n     */\n    createJSONPatch(currentData: Object, originalData: Object): JSONPatchOperations {\n        const ops = [];\n        const data = cloneDeep(currentData); // clone the data for mutation\n\n        // Iterate over the original data and find keys that have changed.\n        // Also remove them from the data object to only leave new keys.\n        Object.keys(originalData).forEach(key => {\n            const type = this.fieldKeyToTypeMap[key];\n            const originalValue = getValue(originalData, key, type);\n            const path = `/${key}`;\n\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                const value = getValue(data, key, type);\n\n                // Only register changed data\n                if (!isEqual(value, originalValue)) {\n                    // Add a test OP for each replaces\n                    ops.push({\n                        op: JSON_PATCH_OP_TEST,\n                        path,\n                        value: originalValue,\n                    });\n                    ops.push({\n                        op: JSON_PATCH_OP_REPLACE,\n                        path,\n                        value,\n                    });\n                }\n            } else {\n                // Key was removed\n                // Add a test OP for removes\n                ops.push({\n                    op: JSON_PATCH_OP_TEST,\n                    path,\n                    value: originalValue,\n                });\n                ops.push({ op: JSON_PATCH_OP_REMOVE, path });\n            }\n            delete data[key];\n        });\n\n        // Iterate over the remaining keys that are new.\n        Object.keys(data).forEach(key => {\n            const type = this.fieldKeyToTypeMap[key];\n            const value = getValue(data, key, type);\n\n            ops.push({\n                op: JSON_PATCH_OP_ADD,\n                path: `/${key}`,\n                value,\n            });\n        });\n\n        return ops;\n    }\n\n    /**\n     * Utility function to determine if instance is editable\n     *\n     * @return {boolean} true if editable\n     */\n    canEdit(): boolean {\n        const { canEdit, onModification, onRemove, onSave }: Props = this.props;\n        return (\n            canEdit &&\n            typeof onRemove === 'function' &&\n            typeof onSave === 'function' &&\n            typeof onModification === 'function'\n        );\n    }\n\n    /**\n     * Utility function to determine if instance is in edit mode\n     *\n     * @return {boolean} true if editing\n     */\n    isEditing(): boolean {\n        const { isEditing }: State = this.state;\n        return this.canEdit() && isEditing;\n    }\n\n    renderEditButton = () => {\n        const { isDirty }: Props = this.props;\n        const { isBusy }: State = this.state;\n        const canEdit = this.canEdit();\n        const isEditing = this.isEditing();\n        const editClassName = classNames('metadata-instance-editor-instance-edit', {\n            'metadata-instance-editor-instance-is-editing': isEditing,\n        });\n\n        if (canEdit && !isDirty && !isBusy) {\n            return (\n                <Tooltip position=\"top-left\" text={<FormattedMessage {...messages.metadataEditTooltip} />}>\n                    <PlainButton\n                        className={editClassName}\n                        data-resin-target=\"metadata-instanceedit\"\n                        onClick={this.toggleIsEditing}\n                        type=\"button\"\n                    >\n                        <IconEdit />\n                    </PlainButton>\n                </Tooltip>\n            );\n        }\n        return null;\n    };\n\n    render() {\n        const { cascadePolicy = {}, isDirty, isCascadingPolicyApplicable, isOpen, template }: Props = this.props;\n        const { fields = [] } = template;\n        const {\n            data,\n            errors,\n            isBusy,\n            isCascadingEnabled,\n            shouldConfirmRemove,\n            shouldShowCascadeOptions,\n            isCascadingOverwritten,\n        }: State = this.state;\n        const isProperties = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES;\n        const isEditing = this.isEditing();\n\n        if (!template || isHidden(template)) {\n            return null;\n        }\n\n        // Animate short and tall cards at consistent speeds.\n        const animationDuration = (fields.length + 1) * 50;\n\n        return (\n            <div ref={this.collapsibleRef}>\n                <Collapsible\n                    animationDuration={animationDuration}\n                    buttonProps={{\n                        [RESIN_TAG_TARGET]: 'metadata-card',\n                    }}\n                    hasStickyHeader\n                    headerActionItems={this.renderEditButton()}\n                    isBordered\n                    isOpen={isOpen}\n                    title={this.getTitle()}\n                >\n                    {shouldConfirmRemove && (\n                        <LoadingIndicatorWrapper isLoading={isBusy}>\n                            <MetadataInstanceConfirmDialog\n                                confirmationMessage={this.getConfirmationMessage()}\n                                onCancel={this.onConfirmCancel}\n                                onConfirm={this.onRemove}\n                            />\n                        </LoadingIndicatorWrapper>\n                    )}\n                    {!shouldConfirmRemove && (\n                        <LoadingIndicatorWrapper isLoading={isBusy}>\n                            <Form onValidSubmit={isDirty ? this.onSave : noop}>\n                                <div className=\"metadata-instance-editor-instance\">\n                                    {isCascadingPolicyApplicable && (\n                                        <CascadePolicy\n                                            canEdit={isEditing && !!cascadePolicy.canEdit}\n                                            isCascadingEnabled={isCascadingEnabled}\n                                            isCascadingOverwritten={isCascadingOverwritten}\n                                            isCustomMetadata={isProperties}\n                                            onCascadeModeChange={this.onCascadeModeChange}\n                                            onCascadeToggle={this.onCascadeToggle}\n                                            shouldShowCascadeOptions={shouldShowCascadeOptions}\n                                        />\n                                    )}\n                                    {isProperties ? (\n                                        <CustomInstance\n                                            canEdit={isEditing}\n                                            data={data}\n                                            onFieldChange={this.onFieldChange}\n                                            onFieldRemove={this.onFieldRemove}\n                                        />\n                                    ) : (\n                                        <TemplatedInstance\n                                            canEdit={isEditing}\n                                            data={data}\n                                            errors={errors}\n                                            onFieldChange={this.onFieldChange}\n                                            onFieldRemove={this.onFieldRemove}\n                                            template={template}\n                                        />\n                                    )}\n                                </div>\n                                {isEditing && (\n                                    <Footer\n                                        onCancel={this.onCancel}\n                                        onRemove={this.onConfirmRemove}\n                                        showSave={isDirty}\n                                    />\n                                )}\n                            </Form>\n                        </LoadingIndicatorWrapper>\n                    )}\n                </Collapsible>\n            </div>\n        );\n    }\n}\n\nexport default Instance;\n","// @flow\nimport * as React from 'react';\n\nimport Instance from './Instance';\n\ntype Props = {\n    editors?: Array<MetadataEditor>,\n    isCascadingPolicyApplicable?: boolean,\n    onModification?: (id: string, isDirty: boolean) => void,\n    onRemove?: (id: string) => void,\n    onSave?: (\n        id: string,\n        data: JSONPatchOperations,\n        cascadingPolicy?: MetadataCascadingPolicyData,\n        rawData: Object,\n    ) => void,\n    selectedTemplateKey?: string,\n};\n\nconst Instances = ({\n    isCascadingPolicyApplicable = false,\n    editors = [],\n    onModification,\n    onRemove,\n    onSave,\n    selectedTemplateKey,\n}: Props) =>\n    editors.map<React.Element<typeof Instance>>(\n        ({ isDirty = false, instance, hasError = false, template }: MetadataEditor) => {\n            const { templateKey } = template;\n            const isOpen = editors.length === 1 || templateKey === selectedTemplateKey;\n            return (\n                <Instance\n                    canEdit={instance.canEdit}\n                    cascadePolicy={instance.cascadePolicy}\n                    data={instance.data}\n                    hasError={hasError}\n                    id={instance.id}\n                    isCascadingPolicyApplicable={isCascadingPolicyApplicable}\n                    isDirty={isDirty}\n                    isOpen={isOpen}\n                    key={`${instance.id}-${templateKey}`}\n                    onModification={onModification}\n                    onSave={onSave}\n                    onRemove={onRemove}\n                    template={template}\n                />\n            );\n        },\n    );\n\nexport default Instances;\n","// @flow\nimport * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\nimport { bdlGray40 } from '../../styles/variables';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconSearch = ({ className = 'icon-search', color = bdlGray40, height = 14, title, width = 14 }: Props) => (\n    <AccessibleSVG\n        className={`icon-search ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 14 14\"\n        width={width}\n    >\n        <path\n            className=\"fill-color\"\n            d=\"M13.7,12.1L11.6,10l-1.1-0.2c0.9-1,1.4-2.4,1.4-3.9c0-3.3-2.7-6-6-6C2.7,0,0,2.7,0,6s2.7,6,6,6 c1.5,0,2.9-0.6,4-1.5l0.2,1l2.1,2.1c0.4,0.4,1,0.4,1.4,0l0,0C14.1,13.1,14.1,12.5,13.7,12.1z M6,10.4c-2.5,0-4.5-2-4.5-4.5 s2-4.5,4.5-4.5s4.5,2,4.5,4.5S8.4,10.4,6,10.4z\"\n            fill={color}\n            fillRule=\"evenodd\"\n        />\n    </AccessibleSVG>\n);\n\nexport default IconSearch;\n","// @flow\nimport * as React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\n\nimport IconClear from '../../icons/general/IconClear';\nimport IconSearch from '../../icons/general/IconSearch';\n\nimport makeLoadable from '../loading-indicator/makeLoadable';\n\nimport './SearchForm.scss';\n\nconst messages = defineMessages({\n    clearButtonTitle: {\n        defaultMessage: 'Clear',\n        description: 'Title for a clear button',\n        id: 'boxui.searchForm.clearButtonTitle',\n    },\n    searchButtonTitle: {\n        defaultMessage: 'Search',\n        description: 'Title for a search button',\n        id: 'boxui.searchForm.searchButtonTitle',\n    },\n    searchLabel: {\n        defaultMessage: 'Search query',\n        description: 'Label for a search input',\n        id: 'boxui.searchForm.searchLabel',\n    },\n});\n\ntype Props = {\n    /** Form submit action */\n    action?: string,\n    className?: string,\n    getSearchInput?: Function,\n    intl: Object,\n    isLoading?: boolean,\n    /** The way to send the form data, get or post */\n    method?: 'get' | 'post',\n    /** Name of the text input */\n    name?: string,\n    /** On change handler for the search input, debounced by 250ms */\n    onChange?: Function,\n    /** On submit handler for the search input */\n    onSubmit?: Function,\n    /** Extra query parameters in addition to the form data */\n    queryParams: Object,\n    /** Boolean to prevent propogation of search clear action */\n    shouldPreventClearEventPropagation?: boolean,\n    /** If the clear button is shown when input field is not empty */\n    useClearButton?: boolean,\n    /** The value of the input if controlled */\n    value?: string,\n};\n\ntype State = {\n    isEmpty: boolean,\n};\n\nclass SearchForm extends React.Component<Props, State> {\n    static defaultProps = {\n        action: undefined,\n        method: 'get',\n        name: 'search',\n        queryParams: {},\n        useClearButton: false,\n    };\n\n    state = {\n        isEmpty: true,\n    };\n\n    static getDerivedStateFromProps(props: Props): any {\n        const { value } = props;\n\n        if (value && !!value.trim()) {\n            return {\n                isEmpty: true,\n            };\n        }\n\n        return null;\n    }\n\n    onClearHandler = (event: SyntheticEvent<>) => {\n        const { onChange, shouldPreventClearEventPropagation } = this.props;\n        if (shouldPreventClearEventPropagation) {\n            event.stopPropagation();\n        }\n\n        if (this.searchInput) {\n            this.searchInput.value = '';\n        }\n        this.setState({ isEmpty: true });\n\n        if (onChange) {\n            onChange('');\n        }\n    };\n\n    onChangeHandler = ({ target }) => {\n        const { value } = target;\n        const { onChange } = this.props;\n        this.setState({ isEmpty: !value || !value.trim().length });\n\n        if (onChange) {\n            onChange(value);\n        }\n    };\n\n    onSubmitHandler = event => {\n        const { value } = event.target.elements[0];\n        const { onSubmit } = this.props;\n\n        if (onSubmit) {\n            onSubmit(value, event);\n        }\n    };\n\n    setInputRef = element => {\n        this.searchInput = element;\n\n        if (this.props.getSearchInput) {\n            this.props.getSearchInput(this.searchInput);\n        }\n    };\n\n    searchInput: ?HTMLInputElement;\n\n    render() {\n        const { action, className, intl, isLoading, method, name, queryParams, useClearButton, ...rest } = this.props;\n        const { isEmpty } = this.state;\n\n        const inputProps = omit(rest, [\n            'getSearchInput',\n            'onChange',\n            'onSubmit',\n            'required',\n            'shouldPreventClearEventPropagation',\n        ]);\n\n        const { formatMessage } = intl;\n        const classes = classNames(className, 'search-input-container');\n        const formClassNames = classNames('search-form', {\n            'is-empty': isEmpty,\n            'use-clear-button': useClearButton,\n        });\n        const hiddenInputs = Object.keys(queryParams).map((param, index) => (\n            <input key={index} name={param} type=\"hidden\" value={queryParams[param]} />\n        ));\n\n        const SearchActions = () => (\n            <div className=\"action-buttons\">\n                <button\n                    type=\"button\"\n                    className=\"action-button search-button\"\n                    title={formatMessage(messages.searchButtonTitle)}\n                >\n                    <IconSearch />\n                </button>\n                <button\n                    className=\"action-button clear-button\"\n                    onClick={this.onClearHandler}\n                    title={formatMessage(messages.clearButtonTitle)}\n                    type=\"button\"\n                >\n                    <IconClear />\n                </button>\n            </div>\n        );\n\n        const LoadableSearchActions = makeLoadable(SearchActions);\n\n        // @NOTE Prevent errors from React about controlled inputs\n        const onChangeStub = () => {};\n\n        return (\n            <div className={classes}>\n                <form\n                    action={action}\n                    className={formClassNames}\n                    method={method}\n                    onChange={this.onChangeHandler}\n                    onSubmit={this.onSubmitHandler}\n                    role=\"search\"\n                >\n                    <input\n                        ref={this.setInputRef}\n                        aria-label={formatMessage(messages.searchLabel)}\n                        autoComplete=\"off\"\n                        className=\"search-input\"\n                        name={name}\n                        onChange={onChangeStub}\n                        type=\"search\"\n                        {...inputProps}\n                    />\n                    <LoadableSearchActions\n                        isLoading={isLoading}\n                        loadingIndicatorProps={{\n                            className: 'search-form-loading-indicator',\n                        }}\n                    />\n                    {hiddenInputs}\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(SearchForm);\n","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport isEqual from 'lodash/isEqual';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport DatalistItem from '../../components/datalist-item';\nimport SelectorDropdown from '../../components/selector-dropdown';\nimport SearchForm from '../../components/search-form/SearchForm';\nimport PlainButton from '../../components/plain-button';\nimport LoadingIndicator from '../../components/loading-indicator';\nimport { Flyout, Overlay } from '../../components/flyout';\n\nimport MenuToggle from '../../components/dropdown-menu/MenuToggle';\nimport messages from './messages';\nimport { TEMPLATE_CUSTOM_PROPERTIES } from './constants';\nimport './TemplateDropdown.scss';\n\ntype Props = {\n    activeTemplate?: ?MetadataTemplate,\n    activeTemplateIcon?: React.Node,\n    className?: string,\n    defaultTemplateIcon?: React.Node,\n    entryButton?: React.Node,\n    intl: any,\n    isDropdownBusy?: boolean,\n    onAdd: (template: MetadataTemplate) => void,\n    onDropdownToggle?: (isDropdownOpen: boolean) => void,\n    templates: Array<MetadataTemplate>,\n    title?: React.Node,\n    usedTemplates: Array<MetadataTemplate>,\n};\n\ntype State = {\n    filterText: string,\n    isDropdownOpen: boolean,\n    templates: Array<MetadataTemplate>,\n};\n\nconst InputContainer = ({ inputProps = {}, ...rest }: { inputProps?: Object }) => (\n    <SearchForm\n        {...inputProps}\n        {...rest}\n        shouldPreventClearEventPropagation\n        data-resin-target=\"metadata-templatesearch\"\n    />\n);\n\nconst getAvailableTemplates = (allTemplates: Array<MetadataTemplate>, usedTemplates: Array<MetadataTemplate>) =>\n    allTemplates.filter(\n        (template: MetadataTemplate) =>\n            usedTemplates.findIndex(\n                (usedTemplate: MetadataTemplate) =>\n                    usedTemplate.templateKey === template.templateKey && usedTemplate.scope === template.scope,\n            ) === -1,\n    );\n\nclass TemplateDropdown extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isDropdownOpen: false,\n            filterText: '',\n            templates: getAvailableTemplates(props.templates, props.usedTemplates),\n        };\n    }\n\n    /**\n     * Updates the state\n     *\n     * @param {Object} prevProps - next props\n     * @return {void}\n     */\n    componentDidUpdate({ templates: prevTemplates, usedTemplates: prevUsedTemplates }: Props) {\n        const { templates, usedTemplates } = this.props;\n\n        if (!isEqual(prevTemplates, templates) || !isEqual(prevUsedTemplates, usedTemplates)) {\n            this.setState({\n                templates: getAvailableTemplates(templates, usedTemplates),\n            });\n        }\n    }\n\n    getDropdown = () => {\n        const {\n            isDropdownBusy,\n            onAdd,\n            activeTemplate,\n            defaultTemplateIcon,\n            activeTemplateIcon,\n            templates: allTemplates,\n            title,\n            usedTemplates,\n        }: Props = this.props;\n        const { templates }: State = this.state;\n        const hasUnusedTemplates = getAvailableTemplates(allTemplates, usedTemplates).length > 0;\n        const hasTemplates = allTemplates.length > 0;\n        const hasResults = templates.length > 0;\n\n        let indicatorOrMessage = null;\n\n        if (isDropdownBusy) {\n            indicatorOrMessage = (\n                <LoadingIndicator className=\"metadata-instance-editor-template-message template-dropdown-loading-indicator\" />\n            );\n        } else if (!hasTemplates || !hasUnusedTemplates || !hasResults) {\n            let message = { id: '' };\n\n            if (!hasTemplates) {\n                message = messages.metadataTemplatesServerHasNoTemplates;\n            } else if (!hasUnusedTemplates) {\n                message = messages.metadataTemplatesNoRemainingTemplates;\n            } else if (!hasResults) {\n                message = messages.metadataTemplatesNoResults;\n            }\n\n            indicatorOrMessage = (\n                <i className=\"metadata-instance-editor-template-message\">\n                    <FormattedMessage {...message} />\n                </i>\n            );\n        }\n\n        const renderedTemplates = templates.map(template => {\n            const isTemplateSelected = activeTemplate && activeTemplate.id === template.id;\n\n            const buttonClassName = classNames('metadata-template-dropdown-select-template', {\n                'metadata-template-dropdown-is-selected': isTemplateSelected,\n            });\n\n            return (\n                <DatalistItem key={template.id}>\n                    <PlainButton className={buttonClassName} tabIndex=\"-1\" type=\"button\">\n                        {isTemplateSelected ? activeTemplateIcon : defaultTemplateIcon}\n                        {this.getTemplateName(template)}\n                    </PlainButton>\n                </DatalistItem>\n            );\n        });\n\n        return (\n            <>\n                <SelectorDropdown\n                    className=\"metadata-instance-editor-template-dropdown-menu\"\n                    title={title}\n                    isAlwaysOpen\n                    onSelect={(index: number) => {\n                        onAdd(templates[index]);\n                    }}\n                    selector={this.getSelector()}\n                    shouldScroll\n                >\n                    {indicatorOrMessage ? null : renderedTemplates}\n                </SelectorDropdown>\n                {indicatorOrMessage}\n            </>\n        );\n    };\n\n    /**\n     * Returns the input field for the drop down\n     *\n     * @return {React.Node} - input selector\n     */\n    getSelector = () => {\n        const { intl }: Props = this.props;\n        const { filterText }: State = this.state;\n        return (\n            <InputContainer\n                label=\"\"\n                onChange={this.handleUserInput}\n                placeholder={intl.formatMessage(messages.metadataTemplateSearchPlaceholder)}\n                type=\"text\"\n                useClearButton\n                value={filterText}\n            />\n        );\n    };\n\n    /**\n     * Returns template display name.\n     * For custom metadata we have it on the client.\n     *\n     * @return {React.Node} - string or formatted name\n     */\n    getTemplateName(template: MetadataTemplate): React.Node {\n        return template.templateKey === TEMPLATE_CUSTOM_PROPERTIES ? (\n            <FormattedMessage className=\"template-display-name\" {...messages.customTitle} />\n        ) : (\n            <div className=\"template-display-name\">{template.displayName}</div>\n        );\n    }\n\n    /**\n     * Updates the filter text and filters the results\n     *\n     * @param {UserInput} userInput - input value returned from onChangeHandler from SearchForm.js\n     * @return {void}\n     */\n    handleUserInput = (userInput: string) => {\n        const { templates: allTemplates, usedTemplates } = this.props;\n        const filterText = userInput;\n        const templates = getAvailableTemplates(allTemplates, usedTemplates);\n\n        this.setState({\n            filterText,\n            templates: templates.filter(template => {\n                const label: string = ((template.templateKey === TEMPLATE_CUSTOM_PROPERTIES\n                    ? messages.customTitle.defaultMessage\n                    : template.displayName): any);\n                return label.toLowerCase().includes(filterText.toLowerCase());\n            }),\n        });\n    };\n\n    onOpen = () => {\n        const { onDropdownToggle, templates, usedTemplates } = this.props;\n\n        if (onDropdownToggle) {\n            onDropdownToggle(true);\n        }\n\n        this.setState({\n            isDropdownOpen: true,\n            filterText: '',\n            templates: getAvailableTemplates(templates, usedTemplates),\n        });\n    };\n\n    onClose = () => {\n        const { onDropdownToggle } = this.props;\n\n        if (onDropdownToggle) {\n            onDropdownToggle(false);\n        }\n\n        this.setState({ isDropdownOpen: false });\n    };\n\n    renderEntryButton = () => {\n        const { entryButton } = this.props;\n        const { isDropdownOpen } = this.state;\n        const buttonToggleClassName = classNames('lnk', {\n            'is-toggled': isDropdownOpen,\n        });\n        if (entryButton) {\n            return entryButton;\n        }\n        return (\n            <PlainButton data-resin-target=\"metadata-templateaddmenu\" className={buttonToggleClassName} type=\"button\">\n                <MenuToggle>\n                    <FormattedMessage {...messages.metadataTemplateAdd} />\n                </MenuToggle>\n            </PlainButton>\n        );\n    };\n\n    render() {\n        const { className } = this.props;\n        const flyoutClassName = classNames('metadata-instance-editor-template-dropdown-flyout', className);\n\n        return (\n            <Flyout\n                className={flyoutClassName}\n                closeOnClick\n                closeOnClickOutside\n                onClose={this.onClose}\n                onOpen={this.onOpen}\n                position=\"bottom-left\"\n                shouldDefaultFocus\n            >\n                {this.renderEntryButton()}\n                <Overlay>{this.getDropdown()}</Overlay>\n            </Flyout>\n        );\n    }\n}\n\nexport { TemplateDropdown as TemplateDropdownBase };\nexport default injectIntl(TemplateDropdown);\n","/**\n * @flow\n * @file Metadata sidebar component\n * @author Box\n */\n\nimport * as React from 'react';\nimport flow from 'lodash/flow';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport { FormattedMessage } from 'react-intl';\nimport API from '../../api';\nimport EmptyContent from '../../features/metadata-instance-editor/EmptyContent';\nimport InlineError from '../../components/inline-error/InlineError';\nimport Instances from '../../features/metadata-instance-editor/Instances';\nimport LoadingIndicator from '../../components/loading-indicator/LoadingIndicator';\nimport LoadingIndicatorWrapper from '../../components/loading-indicator/LoadingIndicatorWrapper';\nimport messages from '../common/messages';\nimport SidebarContent from './SidebarContent';\nimport TemplateDropdown from '../../features/metadata-instance-editor/TemplateDropdown';\nimport { normalizeTemplates } from '../../features/metadata-instance-editor/metadataUtil';\nimport { EVENT_JS_READY } from '../common/logger/constants';\nimport { isUserCorrectableError } from '../../utils/error';\nimport { mark } from '../../utils/performance';\nimport { withAPIContext } from '../common/api-context';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport { withLogger } from '../common/logger';\nimport {\n    FIELD_IS_EXTERNALLY_OWNED,\n    FIELD_PERMISSIONS,\n    FIELD_PERMISSIONS_CAN_UPLOAD,\n    IS_ERROR_DISPLAYED,\n    ORIGIN_METADATA_SIDEBAR,\n    SIDEBAR_VIEW_METADATA,\n} from '../../constants';\nimport './MetadataSidebar.scss';\n\ntype ExternalProps = {\n    isFeatureEnabled: boolean,\n    selectedTemplateKey?: string,\n    templateFilters?: Array<string> | string,\n};\n\ntype PropsWithoutContext = {\n    elementId: string,\n    fileId: string,\n} & ExternalProps;\n\ntype Props = {\n    api: API,\n} & PropsWithoutContext &\n    ErrorContextProps &\n    WithLoggerProps;\n\ntype State = {\n    editors?: Array<MetadataEditor>,\n    error?: MessageDescriptor,\n    file?: BoxItem,\n    isLoading: boolean,\n    templates?: Array<MetadataTemplate>,\n};\n\nconst MARK_NAME_JS_READY = `${ORIGIN_METADATA_SIDEBAR}_${EVENT_JS_READY}`;\n\nmark(MARK_NAME_JS_READY);\n\nclass MetadataSidebar extends React.PureComponent<Props, State> {\n    state = { isLoading: false };\n\n    static defaultProps = {\n        isFeatureEnabled: true,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        const { logger } = this.props;\n        logger.onReadyMetric({\n            endMarkName: MARK_NAME_JS_READY,\n        });\n    }\n\n    componentDidMount() {\n        this.fetchFile();\n    }\n\n    /**\n     * Common error callback\n     *\n     * @param {Error} error - API error\n     * @param {string} code - error code\n     * @param {Object} [newState] - optional state to set\n     * @return {void}\n     */\n    onApiError = (error: ElementsXhrError, code: string, newState: Object = {}) => {\n        const { onError }: Props = this.props;\n        const { status } = error;\n        const isValidError = isUserCorrectableError(status);\n        this.setState({\n            error: messages.sidebarMetadataEditingErrorContent,\n            isLoading: false,\n            ...newState,\n        });\n        onError(error, code, {\n            error,\n            [IS_ERROR_DISPLAYED]: isValidError,\n        });\n    };\n\n    /**\n     * Checks upload permission\n     *\n     * @return {boolean} - true if metadata can be edited\n     */\n    canEdit(): boolean {\n        const { file }: State = this.state;\n        return getProp(file, FIELD_PERMISSIONS_CAN_UPLOAD, false);\n    }\n\n    /**\n     * Finds the editor we are editing\n     *\n     * @param {number} id - instance id\n     * @return {Object} editor instance\n     */\n    getEditor(id: string): ?MetadataEditor {\n        const { editors = [] }: State = this.state;\n        return editors.find(({ instance }) => instance.id === id);\n    }\n\n    /**\n     * Instance remove success handler\n     *\n     * @param {Object} editor - the editor to remove\n     * @return {void}\n     */\n    onRemoveSuccessHandler(editor: MetadataEditor): void {\n        const { editors = [] }: State = this.state;\n        const clone = editors.slice(0);\n        clone.splice(editors.indexOf(editor), 1);\n        this.setState({ editors: clone });\n    }\n\n    /**\n     * Instance remove handler\n     *\n     * @param {string} id - instance id\n     * @return {void}\n     */\n    onRemove = (id: string): void => {\n        const { api }: Props = this.props;\n        const { file }: State = this.state;\n        const editor = this.getEditor(id);\n\n        if (!editor || !file) {\n            return;\n        }\n\n        api.getMetadataAPI(false).deleteMetadata(\n            file,\n            editor.template,\n            () => this.onRemoveSuccessHandler(editor),\n            this.onApiError,\n        );\n    };\n\n    /**\n     * Instance add success handler\n     *\n     * @param {Object} editor - instance editor\n     * @return {void}\n     */\n    onAddSuccessHandler = (editor: MetadataEditor): void => {\n        const { editors = [] }: State = this.state;\n        const clone = editors.slice(0);\n        clone.push(editor);\n        this.setState({ editors: clone, isLoading: false });\n    };\n\n    /**\n     * Instance add handler\n     *\n     * @param {Object} template - instance template\n     * @return {void}\n     */\n    onAdd = (template: MetadataTemplate) => {\n        const { api }: Props = this.props;\n        const { file }: State = this.state;\n\n        if (!file) {\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        api.getMetadataAPI(false).createMetadata(file, template, this.onAddSuccessHandler, this.onApiError);\n    };\n\n    /**\n     * Instance save success handler\n     *\n     * @param {Object} oldEditor - prior editor\n     * @param {Object} newEditor - updated editor\n     * @return {void}\n     */\n    replaceEditor(oldEditor: MetadataEditor, newEditor: MetadataEditor): void {\n        const { editors = [] }: State = this.state;\n        const clone = editors.slice(0);\n        clone.splice(editors.indexOf(oldEditor), 1, newEditor);\n        this.setState({ editors: clone });\n    }\n\n    /**\n     * Instance save error handler\n     *\n     * @param {Object} oldEditor - prior editor\n     * @param {Object} error - api error\n     * @param {string} code - error code\n     * @return {void}\n     */\n    onSaveErrorHandler(oldEditor: MetadataEditor, error: ElementsXhrError, code: string): void {\n        const clone: MetadataEditor = { ...oldEditor, hasError: true }; // shallow clone suffices for hasError setting\n        this.replaceEditor(oldEditor, clone);\n        this.onApiError(error, code);\n    }\n\n    /**\n     * Instance save handler\n     *\n     * @param {string} id - instance id\n     * @param {Array} ops - json patch ops\n     * @return {void}\n     */\n    onSave = (id: string, ops: JSONPatchOperations): void => {\n        const { api }: Props = this.props;\n        const { file }: State = this.state;\n        const oldEditor = this.getEditor(id);\n\n        if (!oldEditor || !file) {\n            return;\n        }\n\n        api.getMetadataAPI(false).updateMetadata(\n            file,\n            oldEditor.template,\n            ops,\n            (newEditor: MetadataEditor) => {\n                this.replaceEditor(oldEditor, newEditor);\n            },\n            (error: ElementsXhrError, code: string) => {\n                this.onSaveErrorHandler(oldEditor, error, code);\n            },\n        );\n    };\n\n    /**\n     * Instance dirty handler\n     *\n     * @param {string} id - instance id\n     * @param {boolean} isDirty - instance dirty state\n     * @return {void}\n     */\n    onModification = (id: string, isDirty: boolean) => {\n        const oldEditor = this.getEditor(id);\n        if (!oldEditor) {\n            return;\n        }\n        const newEditor = { ...oldEditor, isDirty }; // shallow clone suffices for isDirty setting\n        this.replaceEditor(oldEditor, newEditor);\n    };\n\n    /**\n     * Handles a failed metadata fetch\n     *\n     * @private\n     * @param {Error} e - API error\n     * @param {string} code - error code\n     * @return {void}\n     */\n    fetchMetadataErrorCallback = (e: ElementsXhrError, code: string) => {\n        this.onApiError(e, code, {\n            editors: undefined,\n            error: messages.sidebarMetadataFetchingErrorContent,\n            templates: undefined,\n        });\n    };\n\n    /**\n     * Handles a successful metadata fetch\n     *\n     * @param {Object} metadata - instances and templates\n     * @return {void}\n     */\n    fetchMetadataSuccessCallback = ({\n        editors,\n        templates,\n    }: {\n        editors: Array<MetadataEditor>,\n        templates: Array<MetadataTemplate>,\n    }) => {\n        const { selectedTemplateKey, templateFilters } = this.props;\n        this.setState({\n            editors: editors.slice(0), // cloned for potential editing\n            error: undefined,\n            isLoading: false,\n            templates: normalizeTemplates(templates, selectedTemplateKey, templateFilters),\n        });\n    };\n\n    /**\n     * Fetches the metadata editors\n     *\n     * @return {void}\n     */\n    fetchMetadata(): void {\n        const { api, isFeatureEnabled }: Props = this.props;\n        const { file }: State = this.state;\n\n        if (!file) {\n            return;\n        }\n\n        api.getMetadataAPI(false).getMetadata(\n            file,\n            this.fetchMetadataSuccessCallback,\n            this.fetchMetadataErrorCallback,\n            isFeatureEnabled,\n            { refreshCache: true },\n        );\n    }\n\n    /**\n     * Handles a failed file fetch\n     *\n     * @private\n     * @param {Error} e - API error\n     * @param {string} code - error code\n     * @return {void}\n     */\n    fetchFileErrorCallback = (e: ElementsXhrError, code: string) => {\n        this.onApiError(e, code, { error: messages.sidebarFileFetchingErrorContent, file: undefined });\n    };\n\n    /**\n     * Handles a successful file fetch.\n     * Can be called multiple times when refreshing caches.\n     * On file load we should fetch metadata, but we shouldn't need to fetch\n     * if the file permissions haven't changed from a prior file fetch.\n     * Metadata editors mostly care about upload permission.\n     *\n     * @param {Object} file - the Box file\n     * @return {void}\n     */\n    fetchFileSuccessCallback = (file: BoxItem) => {\n        const { file: currentFile }: State = this.state;\n        const currentCanUpload = getProp(currentFile, FIELD_PERMISSIONS_CAN_UPLOAD, false);\n        const newCanUpload = getProp(file, FIELD_PERMISSIONS_CAN_UPLOAD, false);\n        const shouldFetchMetadata = !currentFile || currentCanUpload !== newCanUpload;\n        const callback = shouldFetchMetadata ? this.fetchMetadata : noop;\n        this.setState({ file }, callback);\n    };\n\n    /**\n     * Fetches a file with the fields needed for metadata sidebar\n     *\n     * @return {void}\n     */\n    fetchFile(): void {\n        const { api, fileId }: Props = this.props;\n        api.getFileAPI().getFile(fileId, this.fetchFileSuccessCallback, this.fetchFileErrorCallback, {\n            fields: [FIELD_IS_EXTERNALLY_OWNED, FIELD_PERMISSIONS],\n            refreshCache: true, // see implications in file success callback\n        });\n    }\n\n    refresh(): void {\n        this.fetchMetadata();\n    }\n\n    render() {\n        const { editors, file, error, isLoading, templates }: State = this.state;\n        const { elementId, selectedTemplateKey }: Props = this.props;\n        const showEditor = !!file && !!templates && !!editors;\n        const showLoadingIndicator = !error && !showEditor;\n        const canEdit = this.canEdit();\n        const showTemplateDropdown = showEditor && canEdit;\n        const showEmptyContent = showEditor && ((editors: any): Array<MetadataEditor>).length === 0;\n\n        return (\n            <SidebarContent\n                actions={\n                    showTemplateDropdown ? (\n                        <TemplateDropdown\n                            hasTemplates={templates && templates.length !== 0}\n                            isDropdownBusy={false}\n                            onAdd={this.onAdd}\n                            // $FlowFixMe checked via showTemplateDropdown & showEditor\n                            templates={templates}\n                            // $FlowFixMe checked via showTemplateDropdown & showEditor\n                            usedTemplates={editors.map(editor => editor.template)}\n                        />\n                    ) : null\n                }\n                className=\"bcs-metadata\"\n                elementId={elementId}\n                sidebarView={SIDEBAR_VIEW_METADATA}\n                title={<FormattedMessage {...messages.sidebarMetadataTitle} />}\n            >\n                {error && (\n                    <InlineError title={<FormattedMessage {...messages.error} />}>\n                        <FormattedMessage {...error} />\n                    </InlineError>\n                )}\n                {showLoadingIndicator && <LoadingIndicator />}\n                {showEditor && (\n                    <LoadingIndicatorWrapper className=\"metadata-instance-editor\" isLoading={isLoading}>\n                        {showEmptyContent ? (\n                            <EmptyContent canAdd={canEdit} />\n                        ) : (\n                            <Instances\n                                editors={editors}\n                                onModification={this.onModification}\n                                onRemove={this.onRemove}\n                                onSave={this.onSave}\n                                selectedTemplateKey={selectedTemplateKey}\n                            />\n                        )}\n                    </LoadingIndicatorWrapper>\n                )}\n            </SidebarContent>\n        );\n    }\n}\n\nexport type MetadataSidebarProps = ExternalProps;\nexport { MetadataSidebar as MetadataSidebarComponent };\nexport default flow([withLogger(ORIGIN_METADATA_SIDEBAR), withErrorBoundary(ORIGIN_METADATA_SIDEBAR), withAPIContext])(\n    MetadataSidebar,\n);\n"],"sourceRoot":""}