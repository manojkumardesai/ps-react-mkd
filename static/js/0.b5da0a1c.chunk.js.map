{"version":3,"sources":["../../../../../src/components/form-elements/form/Form.js","../../../../src/components/link/Link.js","../../../../src/components/scroll-wrapper/ScrollWrapper.js","../../../../src/components/selector-dropdown/SelectorDropdown.js","../../../../src/components/link/LinkBase.js","../../../../src/components/flyout/Flyout.js","../../../../src/components/flyout/Overlay.js","../node_modules/form-serialize/index.js"],"names":["Form","currentTarget","formData","serialize","hash","empty","event","form","isValid","onInvalidSubmit","onValidSubmit","registeredInputs","formValidityState","slice","call","inputEl","validityState","validityObj","getFormValidityState","Object","key","Error","nextState","name","registerInput","this","bind","unregisterInput","prevFormValidityState","children","noValidate","onChange","onSubmit","Component","PropTypes","isRequired","Link","className","rest","React","ScrollWrapper","shouldShowTopScrollShadow","shouldShowBottomScrollShadow","newState","attributes","childlist","subtree","scrollTop","scrollHeight","clientHeight","throttle","MutationObserver","scrollRefFn","shadowSize","classes","classNames","onScroll","ref","el","stopDefaultEvent","activeItemIndex","index","scrollBoundarySelector","itemEl","id","document","scrollOptions","block","activeItemID","scrollIntoView","childrenCount","childrenKeys","child","prevChildrenKeys","childKey","container","isAlwaysOpen","onEnter","nextIndex","prevIndex","shouldOpen","onSelect","uniqueId","shouldSetActiveItemOnOpen","haveChildrenChanged","listboxID","selectItem","setActiveItem","setActiveItemID","closeDropdown","dividerIndex","overlayTitle","title","selector","shouldScroll","isOpen","inputProps","role","list","itemProps","onClick","onMouseDown","onMouseEnter","hasDivider","onFocus","onKeyDown","onKeyPress","onPaste","selectorDropdownRef","href","linkRef","target","rel","component","refProp","linkRel","LinkComponent","positions","attachment","targetAttachment","Flyout","overlayNode","closeOnClick","closeOnClickPredicate","rootNode","targetNode","currentNode","nodeName","hasClickableAncestor","isButtonClicked","openOnHover","openOnHoverDelayTimeout","clearTimeout","setTimeout","isVisible","onOpen","onClose","buttonEl","portaledClasses","closeOnClickOutside","closeOnWindowBlur","buttonNode","isInsideToggleButton","isInsideOverlay","targetEl","hasClassAncestor","props","prevProps","prevState","state","window","constrainToScrollParent","constrainToWindow","offset","position","shouldDefaultFocus","elements","tetherPosition","overlayButton","overlayContent","overlayButtonProps","onMouseLeave","overlayProps","overlayButtonID","constraints","to","tetherProps","classPrefix","enabled","element","isVisibleByDefault","omit","k_r_submitter","k_r_success_contrls","brackets","hash_serializer","result","value","match","hash_assign","keys","length","shift","between","Array","isArray","push","_values","string","isNaN","RegExp","exec","parse_keys","existing","str_serialize","replace","encodeURIComponent","module","exports","options","undefined","serializer","radio_store","create","i","disabled","test","type","val","checked","selectOptions","isSelectedOptions","j","option","allowedEmpty","hasValue","selected"],"mappings":"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","file":"static/js/0.b5da0a1c.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport serialize from 'form-serialize';\n\nfunction getFormValidityState(form) {\n    // Turn the form.elements HTMLCollection into Array before reducing\n    return [].slice.call(form.elements).reduce((validityObj, inputEl) => {\n        // Only serialize inputs that have a name defined\n        if (inputEl.name && !inputEl.validity.valid) {\n            const validityState = inputEl.validity;\n\n            if (inputEl.validity.customError) {\n                // If the input is displaying a custom error,\n                // we expose the errorCode stored in the validationMessage\n                validityState.customErrorCode = inputEl.validationMessage;\n            }\n\n            validityObj[inputEl.name] = {\n                validityState,\n            };\n            return validityObj;\n        }\n        return validityObj;\n    }, {});\n}\n\nclass Form extends Component {\n    static propTypes = {\n        children: PropTypes.node,\n        /** Called when an input in the form changes */\n        onChange: PropTypes.func,\n        /** Called when a valid submit is made */\n        onValidSubmit: PropTypes.func.isRequired,\n        /** Called when an invalid submit is made */\n        onInvalidSubmit: PropTypes.func,\n        /** An object mapping input names to error messages */\n        formValidityState: PropTypes.object, // eslint-disable-line react/no-unused-prop-types\n    };\n\n    static childContextTypes = {\n        form: PropTypes.shape({\n            registerInput: PropTypes.func.isRequired,\n            unregisterInput: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            registeredInputs: {},\n        };\n    }\n\n    getChildContext() {\n        return {\n            form: {\n                registerInput: this.registerInput.bind(this),\n                unregisterInput: this.unregisterInput.bind(this),\n            },\n        };\n    }\n\n    componentDidUpdate({ formValidityState: prevFormValidityState }) {\n        const { formValidityState } = this.props;\n        const { registeredInputs } = this.state;\n\n        if (formValidityState !== prevFormValidityState) {\n            Object.keys(formValidityState).forEach(key => {\n                if (registeredInputs[key]) {\n                    registeredInputs[key](formValidityState[key]);\n                }\n            });\n        }\n    }\n\n    onChange = ({ currentTarget }) => {\n        if (this.props.onChange) {\n            const formData = serialize(currentTarget, {\n                hash: true,\n                empty: true,\n            });\n            this.props.onChange(formData);\n        }\n    };\n\n    onSubmit = event => {\n        const form = event.target;\n        event.preventDefault();\n        const isValid = form.checkValidity();\n        const { onInvalidSubmit, onValidSubmit } = this.props;\n        const { registeredInputs } = this.state;\n\n        if (isValid) {\n            const formData = serialize(form, { hash: true, empty: true });\n            onValidSubmit(formData);\n        } else {\n            const formValidityState = getFormValidityState(form);\n\n            // Push form validity state to inputs so errors are shown on submit\n            Object.keys(formValidityState).forEach(\n                key => registeredInputs[key] && registeredInputs[key](formValidityState[key].validityState),\n            );\n\n            if (onInvalidSubmit) {\n                onInvalidSubmit(formValidityState);\n            }\n        }\n    };\n\n    registerInput = (name, setValidityStateHandler) => {\n        const { registeredInputs } = this.state;\n\n        if (registeredInputs[name]) {\n            throw new Error(`Input '${name}' is already registered.`);\n        }\n\n        const nextState = this.state;\n        nextState.registeredInputs[name] = setValidityStateHandler;\n        this.setState(nextState);\n    };\n\n    unregisterInput = name => {\n        const nextState = this.state;\n        delete nextState.registeredInputs[name];\n        this.setState(nextState);\n    };\n\n    render() {\n        const { children } = this.props;\n        return (\n            <form noValidate onChange={this.onChange} onSubmit={this.onSubmit}>\n                {children}\n            </form>\n        );\n    }\n}\n\nexport default Form;\n","// @flow\nimport * as React from 'react';\n\nimport LinkBase from './LinkBase';\n\ntype Props = {\n    children: React.Node,\n    className: string,\n};\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass Link extends React.Component<Props> {\n    static defaultProps = {\n        className: '',\n    };\n\n    render() {\n        const { className, ...rest } = this.props;\n\n        return <LinkBase className={`link ${className}`} {...rest} />;\n    }\n}\n\nexport default Link;\n","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport noop from 'lodash/noop';\nimport throttle from 'lodash/throttle';\n\nimport './ScrollWrapper.scss';\n\ntype Props = {\n    /** Contents for this element */\n    children: React.Node,\n    /** Optional class name(s) to pass thru to the component */\n    className?: string,\n    /** Optional function to get the scrollRef in parent components */\n    scrollRefFn: (?HTMLElement) => void,\n    /** Optional prop to set the shadow size, like background-size ('cover' or 'contain') */\n    shadowSize: 'cover' | 'contain',\n};\n\ntype State = {\n    shouldShowBottomScrollShadow: boolean,\n    shouldShowTopScrollShadow: boolean,\n};\n\nclass ScrollWrapper extends React.Component<Props, State> {\n    static defaultProps = {\n        scrollRefFn: noop,\n        shadowSize: 'cover',\n    };\n\n    state = {\n        shouldShowTopScrollShadow: false,\n        shouldShowBottomScrollShadow: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.observer = new MutationObserver(this.throttledOnContentScroll);\n    }\n\n    componentDidMount = () => {\n        const newState = this.getScrollShadowState();\n        this.setState(newState);\n\n        if (this.scrollRef) {\n            this.scrollRef.addEventListener('transitionend', this.throttledOnContentScroll);\n\n            // Apparently, flow only allows for one truthy check per command, so I have to either:\n            // 1) duplicate this check per call, or\n            // 2) nest if checks (_slightly more performant_)\n            if (this.scrollRef) {\n                this.observer.observe(this.scrollRef, {\n                    attributes: true,\n                    childlist: true,\n                    subtree: true,\n                });\n            }\n        }\n    };\n\n    componentWillUnmount() {\n        this.observer.disconnect();\n\n        if (this.scrollRef) {\n            this.scrollRef.removeEventListener('transitionend', this.throttledOnContentScroll);\n        }\n    }\n\n    onContentScroll = (): void => {\n        const newState = this.getScrollShadowState();\n        this.setState(newState);\n    };\n\n    getScrollShadowState = () => {\n        const { scrollTop, scrollHeight, clientHeight } = this.scrollRef || {};\n        const newState = {};\n\n        if (scrollTop > 0 && scrollTop < scrollHeight - clientHeight) {\n            newState.shouldShowTopScrollShadow = true;\n            newState.shouldShowBottomScrollShadow = true;\n        }\n\n        if (scrollTop === 0) {\n            newState.shouldShowTopScrollShadow = false;\n        }\n\n        if (scrollTop < scrollHeight - clientHeight) {\n            newState.shouldShowBottomScrollShadow = true;\n        }\n\n        if (scrollTop === scrollHeight - clientHeight) {\n            newState.shouldShowBottomScrollShadow = false;\n        }\n\n        return newState;\n    };\n\n    observer: MutationObserver;\n\n    scrollRef: ?HTMLDivElement = null;\n\n    // Throttle to 10 fps\n    throttledOnContentScroll = throttle(this.onContentScroll, 100);\n\n    render() {\n        const { children, className = '', scrollRefFn, shadowSize, ...rest } = this.props;\n        const { shouldShowTopScrollShadow, shouldShowBottomScrollShadow } = this.state;\n\n        const classes = classNames(`scroll-container`, className, {\n            'is-showing-top-shadow': shouldShowTopScrollShadow,\n            'is-showing-bottom-shadow': shouldShowBottomScrollShadow,\n        });\n\n        return (\n            <div className={classes} {...rest}>\n                <div\n                    className={classNames('scroll-wrap-container', `style--${shadowSize}`)}\n                    onScroll={this.throttledOnContentScroll}\n                    ref={el => {\n                        this.scrollRef = el;\n                        scrollRefFn(el);\n                    }}\n                >\n                    {children}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ScrollWrapper;\n","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\n\nimport { scrollIntoView } from '../../utils/dom';\nimport ScrollWrapper from '../scroll-wrapper';\nimport { OVERLAY_WRAPPER_CLASS } from '../../constants';\n\nimport './SelectorDropdown.scss';\n\nfunction stopDefaultEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\ntype Props = {\n    /** Options to render in the dropdown filtered based on the input text */\n    children?: React.Node,\n    /** CSS class for the wrapper div */\n    className?: string,\n    /** Index at which to insert the divider */\n    dividerIndex?: number,\n    /** Options to keep the results always open */\n    isAlwaysOpen?: boolean,\n    /** Function called on keyboard \"Enter\" event only if enter does not trigger selection */\n    onEnter?: (event: SyntheticKeyboardEvent<HTMLDivElement>) => void,\n    /** Function called with the index of the selected option and the event (selected by keyboard or click) */\n    onSelect?: Function,\n    /** Optional title of the overlay */\n    overlayTitle?: string,\n    /** A CSS selector matching the element to use as a boundary when auto-scrolling dropdown elements into view. When not provided, boundary will be determined by scrollIntoView utility function */\n    scrollBoundarySelector?: string,\n    /** Component containing an input text field and takes `inputProps` to spread onto the input element */\n    selector: React.Element<any>,\n    /** Boolean to indicate whether the dropdown should scroll */\n    shouldScroll?: boolean,\n    /** Determines whether or not the first item is highlighted automatically when the dropdown opens */\n    shouldSetActiveItemOnOpen?: boolean,\n    /** Optional title text that will be rendered above the list */\n    title?: React.Node,\n};\n\ntype State = {\n    activeItemID: string | null,\n    activeItemIndex: number,\n    shouldOpen: boolean,\n};\n\nclass SelectorDropdown extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.listboxID = uniqueId('listbox');\n\n        this.state = {\n            activeItemID: null,\n            activeItemIndex: -1,\n            shouldOpen: false,\n        };\n\n        this.selectorDropdownRef = React.createRef();\n    }\n\n    componentDidUpdate({ shouldSetActiveItemOnOpen, children }: Props) {\n        if (this.haveChildrenChanged(children)) {\n            // For UX purposes filtering the items is equivalent\n            // to re-opening the dropdown. In such cases we highlight\n            // the first item when configured to do so\n            if (shouldSetActiveItemOnOpen) {\n                this.setActiveItem(0);\n            } else {\n                this.resetActiveItem();\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        // just in case event listener was added during openDropdown() but the component\n        // gets unmounted without closeDropdown()\n        document.removeEventListener('click', this.handleDocumentClick, true);\n    }\n\n    setActiveItem = (index: number) => {\n        this.setState({ activeItemIndex: index });\n        if (index === -1) {\n            this.setActiveItemID(null);\n        }\n    };\n\n    setActiveItemID = (id: string | null) => {\n        const { scrollBoundarySelector } = this.props;\n        const itemEl = id ? document.getElementById(id) : null;\n\n        const scrollOptions: Object = {\n            block: 'nearest',\n        };\n\n        // Allow null in case we want to clear the default\n        // boundary from scrollIntoView\n        if (typeof scrollBoundarySelector !== 'undefined') {\n            scrollOptions.boundary = document.querySelector(scrollBoundarySelector);\n        }\n\n        this.setState({ activeItemID: id }, () => {\n            scrollIntoView(itemEl, scrollOptions);\n        });\n    };\n\n    listboxID: string;\n\n    selectorDropdownRef: { current: null | HTMLDivElement };\n\n    haveChildrenChanged = (prevChildren?: React.Node) => {\n        const { children } = this.props;\n        const childrenCount = React.Children.count(children);\n        const prevChildrenCount = React.Children.count(prevChildren);\n\n        if (childrenCount !== prevChildrenCount) {\n            return true;\n        }\n\n        if (childrenCount === 0) {\n            return false;\n        }\n\n        const childrenKeys = React.Children.map(children, child => child.key);\n        const prevChildrenKeys = React.Children.map(prevChildren, child => child.key);\n        return childrenKeys.some((childKey, index) => childKey !== prevChildrenKeys[index]);\n    };\n\n    resetActiveItem = () => {\n        this.setState({\n            activeItemID: null,\n            activeItemIndex: -1,\n        });\n    };\n\n    handleFocus = () => {\n        this.openDropdown();\n    };\n\n    handleDocumentClick = (event: MouseEvent) => {\n        const container = this.selectorDropdownRef.current;\n        const isInside =\n            (container && event.target instanceof Node && container.contains(event.target)) ||\n            container === event.target;\n\n        if (!isInside) {\n            this.closeDropdown();\n        }\n    };\n\n    handleInput = () => {\n        this.openDropdown();\n    };\n\n    handleKeyDown = (event: SyntheticKeyboardEvent<HTMLDivElement>) => {\n        const { children, isAlwaysOpen, onEnter } = this.props;\n        const { activeItemIndex } = this.state;\n        const childrenCount = React.Children.count(children);\n\n        switch (event.key) {\n            case 'ArrowDown':\n                if (this.isDropdownOpen()) {\n                    if (childrenCount) {\n                        stopDefaultEvent(event);\n                    }\n                    const nextIndex = activeItemIndex === childrenCount - 1 ? -1 : activeItemIndex + 1;\n                    this.setActiveItem(nextIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case 'ArrowUp':\n                if (this.isDropdownOpen()) {\n                    if (childrenCount) {\n                        stopDefaultEvent(event);\n                    }\n                    const prevIndex = activeItemIndex === -1 ? childrenCount - 1 : activeItemIndex - 1;\n                    this.setActiveItem(prevIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case 'Enter':\n                if (activeItemIndex !== -1 && this.isDropdownOpen()) {\n                    stopDefaultEvent(event);\n                    this.selectItem(activeItemIndex, event);\n                } else if (onEnter) {\n                    onEnter(event);\n                }\n                break;\n            case 'Tab':\n                if (this.isDropdownOpen()) {\n                    this.closeDropdown();\n                    this.resetActiveItem();\n                }\n                break;\n            case 'Escape':\n                if (!isAlwaysOpen && this.isDropdownOpen()) {\n                    stopDefaultEvent(event);\n                    this.closeDropdown();\n                    this.resetActiveItem();\n                }\n                break;\n            // no default\n        }\n    };\n\n    isDropdownOpen = () => {\n        const { children, isAlwaysOpen } = this.props;\n        const { shouldOpen } = this.state;\n        const childrenCount = React.Children.count(children);\n        return childrenCount > 0 && (!!isAlwaysOpen || shouldOpen);\n    };\n\n    openDropdown = () => {\n        if (!this.state.shouldOpen) {\n            const { shouldSetActiveItemOnOpen } = this.props;\n\n            if (shouldSetActiveItemOnOpen) {\n                this.setActiveItem(0);\n            }\n            this.setState({ shouldOpen: true });\n            document.addEventListener('click', this.handleDocumentClick, true);\n        }\n    };\n\n    closeDropdown = () => {\n        this.setState({ shouldOpen: false });\n        document.removeEventListener('click', this.handleDocumentClick, true);\n    };\n\n    selectItem = (index: number, event: SyntheticEvent<>) => {\n        const { onSelect } = this.props;\n        if (onSelect) {\n            onSelect(index, event);\n        }\n        this.closeDropdown();\n    };\n\n    render() {\n        const { listboxID, selectItem, setActiveItem, setActiveItemID, closeDropdown } = this;\n        const { dividerIndex, overlayTitle, children, className, title, selector, shouldScroll } = this.props;\n        const { activeItemID, activeItemIndex } = this.state;\n        const isOpen = this.isDropdownOpen();\n        const inputProps: Object = {\n            'aria-activedescendant': activeItemID,\n            'aria-autocomplete': 'list',\n            'aria-expanded': isOpen,\n            role: 'combobox',\n        };\n        if (isOpen) {\n            inputProps['aria-owns'] = listboxID;\n        }\n\n        const list = (\n            <ul className=\"overlay\" id={listboxID} role=\"listbox\">\n                {overlayTitle && <h5 className=\"SelectorDropdown-title\">{overlayTitle}</h5>}\n                {React.Children.map(children, (item, index) => {\n                    const itemProps: Object = {\n                        onClick: event => {\n                            selectItem(index, event);\n                        },\n                        /* preventDefault on mousedown so blur doesn't happen before click */\n                        onMouseDown: event => {\n                            event.preventDefault();\n                        },\n                        onMouseEnter: () => {\n                            setActiveItem(index);\n                        },\n                        closeDropdown: () => {\n                            closeDropdown();\n                        },\n                        setActiveItemID,\n                    };\n\n                    if (index === activeItemIndex) {\n                        itemProps.isActive = true;\n                    }\n\n                    const hasDivider = index === dividerIndex;\n\n                    return (\n                        <>\n                            {hasDivider && <hr className=\"SelectorDropdown-divider\" />}\n                            {React.cloneElement(item, itemProps)}\n                        </>\n                    );\n                })}\n            </ul>\n        );\n\n        // change onKeyPress/onPaste back to onInput when React fixes this IE11 bug: https://github.com/facebook/react/issues/7280\n\n        // We're simulating the blur event with the tab key listener and the\n        // click listener as a proxy because IE will trigger a blur when\n        // using the scrollbar in the dropdown which indavertently closes the dropdown.\n        return (\n            // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n            <div\n                className={classNames('SelectorDropdown', className)}\n                onFocus={this.handleFocus}\n                onKeyDown={this.handleKeyDown}\n                onKeyPress={this.handleInput}\n                onPaste={this.handleInput}\n                ref={this.selectorDropdownRef}\n            >\n                {React.cloneElement(selector, { inputProps })}\n                {isOpen && (\n                    <div className={`${OVERLAY_WRAPPER_CLASS} is-visible`}>\n                        {title}\n                        {shouldScroll ? <ScrollWrapper>{list}</ScrollWrapper> : list}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default SelectorDropdown;\n","// @flow\nimport * as React from 'react';\n\ntype Props = {\n    children: React.Node,\n    component?: React.ElementType,\n    href?: string,\n    linkRef?: Function,\n    refProp?: string,\n    rel?: string,\n    target?: string,\n};\n\nconst LinkBase = ({ children, href = '#', linkRef, target, rel, component, refProp, ...rest }: Props) => {\n    // Automatically append rel=\"noopener\" for external links\n    // (security fix) if no `rel` was passed\n    const linkRel = target === '_blank' && !rel ? 'noopener' : rel;\n\n    const LinkComponent = component || 'a';\n\n    const ref = { [refProp || 'ref']: linkRef };\n\n    return (\n        <LinkComponent href={href} rel={linkRel} target={target} {...ref} {...rest}>\n            {children}\n        </LinkComponent>\n    );\n};\n\nexport default LinkBase;\n","// @flow\nimport * as React from 'react';\nimport TetherComponent from 'react-tether';\nimport uniqueId from 'lodash/uniqueId';\n\nimport './Flyout.scss';\n\nconst BOTTOM_CENTER = 'bottom-center';\nconst BOTTOM_LEFT = 'bottom-left';\nconst BOTTOM_RIGHT = 'bottom-right';\nconst MIDDLE_LEFT = 'middle-left';\nconst MIDDLE_RIGHT = 'middle-right';\nconst TOP_CENTER = 'top-center';\nconst TOP_LEFT = 'top-left';\nconst TOP_RIGHT = 'top-right';\n\nconst positions = {\n    [BOTTOM_CENTER]: {\n        attachment: 'top center',\n        targetAttachment: 'bottom center',\n    },\n    [BOTTOM_LEFT]: {\n        attachment: 'top right',\n        targetAttachment: 'bottom right',\n    },\n    [BOTTOM_RIGHT]: {\n        attachment: 'top left',\n        targetAttachment: 'bottom left',\n    },\n    [MIDDLE_LEFT]: {\n        attachment: 'middle right',\n        targetAttachment: 'middle left',\n    },\n    [MIDDLE_RIGHT]: {\n        attachment: 'middle left',\n        targetAttachment: 'middle right',\n    },\n    [TOP_CENTER]: {\n        attachment: 'bottom center',\n        targetAttachment: 'top center',\n    },\n    [TOP_LEFT]: {\n        attachment: 'bottom right',\n        targetAttachment: 'top right',\n    },\n    [TOP_RIGHT]: {\n        attachment: 'bottom left',\n        targetAttachment: 'top left',\n    },\n};\n\n/**\n * Checks if there is a clickable ancestor or self\n * @param {Node} rootNode The base node we should stop at\n * @param {Node} targetNode The target node of the event\n * @returns {boolean}\n */\nconst hasClickableAncestor = (rootNode, targetNode) => {\n    // Check if the element or any of the ancestors are click-able (stopping at the component boundary)\n    let currentNode = targetNode;\n    while (currentNode && currentNode instanceof Node && currentNode.parentNode && currentNode !== rootNode) {\n        const nodeName = currentNode.nodeName.toUpperCase();\n        if (nodeName === 'A' || nodeName === 'BUTTON') {\n            return true;\n        }\n        currentNode = currentNode.parentNode;\n    }\n    return false;\n};\n\n/**\n * Checks if the target element is inside an element with the given CSS class.\n * @param {HTMLElement} targetEl The target element\n * @param {string} className A CSS class on the element to check for\n */\nconst hasClassAncestor = (targetEl, className) => {\n    let el = targetEl;\n    while (el && el instanceof HTMLElement) {\n        if (el.classList.contains(className)) {\n            return true;\n        }\n        el = el.parentNode;\n    }\n    return false;\n};\n\nexport type FlyoutProps = {\n    children: React.Node,\n    /**\n     * Set className to the overlay wrapper\n     */\n    className?: string,\n    /**\n     * If set to true, closes the overlay on clicking buttons/links inside\n     * of it\n     */\n    closeOnClick?: boolean,\n    /**\n     * If set to true, closes the overlay on clicking outside of it\n     */\n    closeOnClickOutside?: boolean,\n    /**\n     * Function that will interrogate the click event to determine whether or not to close the overlay if closeOnClick is enabled\n     */\n    closeOnClickPredicate?: Function,\n    /**\n     * If set to true, closes the overlay when window loses focus\n     */\n    closeOnWindowBlur?: boolean,\n    /**\n     * Sets tether constrain to scrollParent\n     */\n    constrainToScrollParent?: boolean,\n    /**\n     * Sets tether constrain to window\n     */\n    constrainToWindow?: boolean,\n    /**\n     * Whether overlay should be visible by default\n     */\n    isVisibleByDefault: boolean,\n    /**\n     * Will fire this callback when the flyout should open\n     */\n    offset?: string,\n    /**\n     * Will fire this callback when the flyout should close\n     */\n    onClose?: Function,\n    /**\n     * Adjusts placement of the overlay (SEE http://tether.io/#options)\n     */\n    onOpen?: Function,\n    /**\n     * Whether overlay should open on hover\n     */\n    openOnHover?: boolean,\n    /**\n     * Time in milliseconds that the button should wait before opening and closing the flyout\n     */\n    openOnHoverDelayTimeout?: number,\n    /** An array of CSS classes for portaled elements in the overlay, used to check whether a click is inside the overlay */\n    portaledClasses: Array<string>,\n    /**\n     * Position of the overlay\n     */\n    position:\n        | 'bottom-center'\n        | 'bottom-left'\n        | 'bottom-right'\n        | 'middle-left'\n        | 'middle-right'\n        | 'top-center'\n        | 'top-left'\n        | 'top-right',\n    /**\n     * Prop whether to focus first focusable element or not\n     */\n    shouldDefaultFocus?: boolean,\n};\n\ntype State = {\n    isButtonClicked: boolean,\n    isVisible: boolean,\n};\n\ntype Props = FlyoutProps;\n\nclass Flyout extends React.Component<Props, State> {\n    static defaultProps = {\n        className: '',\n        closeOnClick: true,\n        closeOnClickOutside: true,\n        closeOnWindowBlur: false,\n        constrainToScrollParent: true,\n        constrainToWindow: false,\n        isVisibleByDefault: false,\n        openOnHover: false,\n        openOnHoverDelayTimeout: 300,\n        portaledClasses: [],\n        position: BOTTOM_RIGHT,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.overlayID = uniqueId('overlay');\n        this.overlayButtonID = uniqueId('flyoutbutton');\n        this.state = {\n            isVisible: props.isVisibleByDefault,\n            isButtonClicked: false,\n        };\n    }\n\n    componentDidUpdate(prevProps: Props, prevState: State) {\n        if (!prevState.isVisible && this.state.isVisible) {\n            const { closeOnClickOutside, closeOnWindowBlur } = this.props;\n            // When overlay is being opened\n            if (closeOnClickOutside) {\n                document.addEventListener('click', this.handleDocumentClickOrWindowBlur, true);\n                document.addEventListener('contextmenu', this.handleDocumentClickOrWindowBlur, true);\n            }\n            if (closeOnWindowBlur) {\n                window.addEventListener('blur', this.handleDocumentClickOrWindowBlur, true);\n            }\n        } else if (prevState.isVisible && !this.state.isVisible) {\n            // When overlay is being closed\n            document.removeEventListener('contextmenu', this.handleDocumentClickOrWindowBlur, true);\n            document.removeEventListener('click', this.handleDocumentClickOrWindowBlur, true);\n            window.removeEventListener('blur', this.handleDocumentClickOrWindowBlur, true);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.state.isVisible) {\n            // Clean-up global click handlers\n            document.removeEventListener('contextmenu', this.handleDocumentClickOrWindowBlur, true);\n            document.removeEventListener('click', this.handleDocumentClickOrWindowBlur, true);\n            window.removeEventListener('blur', this.handleDocumentClickOrWindowBlur, true);\n        }\n\n        if (this.props.openOnHover && this.hoverDelay) {\n            clearTimeout(this.hoverDelay);\n        }\n    }\n\n    overlayButtonID: string;\n\n    overlayID: string;\n\n    handleOverlayClick = (event: SyntheticEvent<>) => {\n        const overlayNode = document.getElementById(this.overlayID);\n        const { closeOnClick, closeOnClickPredicate } = this.props;\n        if (!closeOnClick || !hasClickableAncestor(overlayNode, event.target)) {\n            return;\n        }\n        if (closeOnClickPredicate && !closeOnClickPredicate(event)) {\n            return;\n        }\n\n        this.handleOverlayClose();\n    };\n\n    handleButtonClick = (event: SyntheticUIEvent<>) => {\n        const { isVisible } = this.state;\n        if (isVisible) {\n            this.closeOverlay();\n        } else {\n            this.openOverlay();\n        }\n\n        // If button was clicked, the detail field should hold number of clicks.\n        // If number is zero, the event was synthesized.\n        // https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail\n        const isButtonClicked = event.detail > 0;\n\n        this.setState({ isButtonClicked });\n\n        event.preventDefault();\n    };\n\n    hoverDelay: TimeoutID | void;\n\n    handleButtonHover = () => {\n        const { openOnHover, openOnHoverDelayTimeout } = this.props;\n        if (openOnHover) {\n            clearTimeout(this.hoverDelay);\n\n            this.hoverDelay = setTimeout(() => {\n                this.openOverlay();\n            }, openOnHoverDelayTimeout);\n        }\n    };\n\n    handleButtonHoverLeave = () => {\n        const { openOnHover, openOnHoverDelayTimeout } = this.props;\n        if (openOnHover) {\n            clearTimeout(this.hoverDelay);\n\n            this.hoverDelay = setTimeout(() => {\n                this.closeOverlay();\n            }, openOnHoverDelayTimeout);\n        }\n    };\n\n    openOverlay = () => {\n        this.setState({\n            isVisible: true,\n        });\n\n        const { onOpen } = this.props;\n        if (onOpen) {\n            onOpen();\n        }\n    };\n\n    closeOverlay = () => {\n        this.setState({\n            isVisible: false,\n        });\n\n        const { onClose } = this.props;\n        if (onClose) {\n            onClose();\n        }\n    };\n\n    focusButton = () => {\n        const buttonEl = document.getElementById(this.overlayButtonID);\n        if (buttonEl) {\n            buttonEl.focus();\n        }\n    };\n\n    handleOverlayClose = () => {\n        this.focusButton();\n        this.closeOverlay();\n    };\n\n    handleDocumentClickOrWindowBlur = (event: MouseEvent | FocusEvent) => {\n        const { portaledClasses, closeOnClickOutside, closeOnWindowBlur } = this.props;\n        const { isVisible } = this.state;\n\n        if (!isVisible || !(closeOnClickOutside || closeOnWindowBlur)) {\n            return;\n        }\n\n        const overlayNode = document.getElementById(this.overlayID);\n        const buttonNode = document.getElementById(this.overlayButtonID);\n\n        const isInsideToggleButton =\n            (buttonNode && event.target instanceof Node && buttonNode.contains(event.target)) ||\n            buttonNode === event.target;\n        const isInsideOverlay =\n            (overlayNode && event.target instanceof Node && overlayNode.contains(event.target)) ||\n            overlayNode === event.target;\n        const isInside = isInsideToggleButton || isInsideOverlay;\n\n        if (isInside || portaledClasses.some(className => hasClassAncestor(event.target, className))) {\n            return;\n        }\n\n        // Only close overlay when the click is outside of the flyout or window loses focus\n        this.closeOverlay();\n    };\n\n    render() {\n        const {\n            children,\n            className = '',\n            constrainToScrollParent,\n            constrainToWindow,\n            offset,\n            openOnHover,\n            position,\n            shouldDefaultFocus,\n        } = this.props;\n        const { isButtonClicked, isVisible } = this.state;\n        const elements = React.Children.toArray(children);\n        const tetherPosition = positions[position];\n\n        if (elements.length !== 2) {\n            throw new Error('Flyout must have exactly two children: A button component and a <Overlay>');\n        }\n\n        const overlayButton = elements[0];\n        const overlayContent = elements[1];\n\n        const overlayButtonProps: Object = {\n            id: this.overlayButtonID,\n            key: this.overlayButtonID,\n            role: 'button',\n            onClick: this.handleButtonClick,\n            onMouseEnter: this.handleButtonHover,\n            onMouseLeave: this.handleButtonHoverLeave,\n            'aria-haspopup': 'true',\n            'aria-expanded': isVisible ? 'true' : 'false',\n        };\n\n        if (isVisible) {\n            overlayButtonProps['aria-controls'] = this.overlayID;\n        }\n\n        const overlayProps = {\n            id: this.overlayID,\n            key: this.overlayID,\n            role: 'dialog',\n            onClick: this.handleOverlayClick,\n            onClose: this.handleOverlayClose,\n            onMouseEnter: this.handleButtonHover,\n            onMouseLeave: this.handleButtonHoverLeave,\n            shouldDefaultFocus: shouldDefaultFocus || (!isButtonClicked && !openOnHover),\n            'aria-labelledby': this.overlayButtonID,\n        };\n\n        const constraints = [];\n\n        if (constrainToScrollParent) {\n            constraints.push({\n                to: 'scrollParent',\n                attachment: 'together',\n            });\n        }\n\n        if (constrainToWindow) {\n            constraints.push({\n                to: 'window',\n                attachment: 'together',\n            });\n        }\n\n        const tetherProps: Object = {\n            classPrefix: 'flyout-overlay',\n            attachment: tetherPosition.attachment,\n            targetAttachment: tetherPosition.targetAttachment,\n            enabled: isVisible,\n            classes: {\n                element: `flyout-overlay ${className}`,\n            },\n            constraints,\n        };\n\n        if (offset) {\n            tetherProps.offset = offset;\n        } else {\n            switch (position) {\n                case BOTTOM_CENTER:\n                case BOTTOM_LEFT:\n                case BOTTOM_RIGHT:\n                    tetherProps.offset = '-10px 0';\n                    break;\n                case TOP_CENTER:\n                case TOP_LEFT:\n                case TOP_RIGHT:\n                    tetherProps.offset = '10px 0';\n                    break;\n                case MIDDLE_LEFT:\n                    tetherProps.offset = '0 10px';\n                    break;\n                case MIDDLE_RIGHT:\n                    tetherProps.offset = '0 -10px';\n                    break;\n                default:\n                // no default\n            }\n        }\n\n        return (\n            <TetherComponent {...tetherProps}>\n                {React.cloneElement(overlayButton, overlayButtonProps)}\n                {isVisible ? React.cloneElement(overlayContent, overlayProps) : null}\n            </TetherComponent>\n        );\n    }\n}\n\nexport default Flyout;\n","// @flow\nimport * as React from 'react';\nimport omit from 'lodash/omit';\n\nimport FocusTrap from '../focus-trap';\n\nexport type Props = {\n    /** Overlay contents */\n    children: React.Node,\n    /** Component class names */\n    className?: string,\n    onClick?: Function,\n    onClose?: Function,\n    shouldDefaultFocus?: boolean,\n};\n\nclass Overlay extends React.Component<Props> {\n    closeOverlay = () => {\n        const { onClose } = this.props;\n        if (!onClose) {\n            return;\n        }\n        setTimeout(() => onClose(), 0);\n    };\n\n    handleOverlayKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        if (event.key !== 'Escape') {\n            return;\n        }\n        event.stopPropagation();\n        event.preventDefault();\n        this.closeOverlay();\n    };\n\n    render() {\n        const { children, className, ...rest } = this.props;\n        const overlayProps = omit(rest, ['onClose']);\n        overlayProps.className = className;\n        overlayProps.handleOverlayKeyDown = this.handleOverlayKeyDown;\n        overlayProps.tabIndex = 0;\n\n        return (\n            <FocusTrap {...overlayProps}>\n                <div className=\"overlay\">{children}</div>\n            </FocusTrap>\n        );\n    }\n}\n\nexport default Overlay;\n","// get successful control from form and assemble into object\n// http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2\n\n// types which indicate a submit action and are not successful controls\n// these will be ignored\nvar k_r_submitter = /^(?:submit|button|image|reset|file)$/i;\n\n// node names which could be successful controls\nvar k_r_success_contrls = /^(?:input|select|textarea|keygen)/i;\n\n// Matches bracket notation.\nvar brackets = /(\\[[^\\[\\]]*\\])/g;\n\n// serializes form fields\n// @param form MUST be an HTMLForm element\n// @param options is an optional argument to configure the serialization. Default output\n// with no options specified is a url encoded string\n//    - hash: [true | false] Configure the output type. If true, the output will\n//    be a js object.\n//    - serializer: [function] Optional serializer function to override the default one.\n//    The function takes 3 arguments (result, key, value) and should return new result\n//    hash and url encoded str serializers are provided with this module\n//    - disabled: [true | false]. If true serialize disabled fields.\n//    - empty: [true | false]. If true serialize empty fields\nfunction serialize(form, options) {\n    if (typeof options != 'object') {\n        options = { hash: !!options };\n    }\n    else if (options.hash === undefined) {\n        options.hash = true;\n    }\n\n    var result = (options.hash) ? {} : '';\n    var serializer = options.serializer || ((options.hash) ? hash_serializer : str_serialize);\n\n    var elements = form && form.elements ? form.elements : [];\n\n    //Object store each radio and set if it's empty or not\n    var radio_store = Object.create(null);\n\n    for (var i=0 ; i<elements.length ; ++i) {\n        var element = elements[i];\n\n        // ingore disabled fields\n        if ((!options.disabled && element.disabled) || !element.name) {\n            continue;\n        }\n        // ignore anyhting that is not considered a success field\n        if (!k_r_success_contrls.test(element.nodeName) ||\n            k_r_submitter.test(element.type)) {\n            continue;\n        }\n\n        var key = element.name;\n        var val = element.value;\n\n        // we can't just use element.value for checkboxes cause some browsers lie to us\n        // they say \"on\" for value when the box isn't checked\n        if ((element.type === 'checkbox' || element.type === 'radio') && !element.checked) {\n            val = undefined;\n        }\n\n        // If we want empty elements\n        if (options.empty) {\n            // for checkbox\n            if (element.type === 'checkbox' && !element.checked) {\n                val = '';\n            }\n\n            // for radio\n            if (element.type === 'radio') {\n                if (!radio_store[element.name] && !element.checked) {\n                    radio_store[element.name] = false;\n                }\n                else if (element.checked) {\n                    radio_store[element.name] = true;\n                }\n            }\n\n            // if options empty is true, continue only if its radio\n            if (val == undefined && element.type == 'radio') {\n                continue;\n            }\n        }\n        else {\n            // value-less fields are ignored unless options.empty is true\n            if (!val) {\n                continue;\n            }\n        }\n\n        // multi select boxes\n        if (element.type === 'select-multiple') {\n            val = [];\n\n            var selectOptions = element.options;\n            var isSelectedOptions = false;\n            for (var j=0 ; j<selectOptions.length ; ++j) {\n                var option = selectOptions[j];\n                var allowedEmpty = options.empty && !option.value;\n                var hasValue = (option.value || allowedEmpty);\n                if (option.selected && hasValue) {\n                    isSelectedOptions = true;\n\n                    // If using a hash serializer be sure to add the\n                    // correct notation for an array in the multi-select\n                    // context. Here the name attribute on the select element\n                    // might be missing the trailing bracket pair. Both names\n                    // \"foo\" and \"foo[]\" should be arrays.\n                    if (options.hash && key.slice(key.length - 2) !== '[]') {\n                        result = serializer(result, key + '[]', option.value);\n                    }\n                    else {\n                        result = serializer(result, key, option.value);\n                    }\n                }\n            }\n\n            // Serialize if no selected options and options.empty is true\n            if (!isSelectedOptions && options.empty) {\n                result = serializer(result, key, '');\n            }\n\n            continue;\n        }\n\n        result = serializer(result, key, val);\n    }\n\n    // Check for all empty radio buttons and serialize them with key=\"\"\n    if (options.empty) {\n        for (var key in radio_store) {\n            if (!radio_store[key]) {\n                result = serializer(result, key, '');\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction parse_keys(string) {\n    var keys = [];\n    var prefix = /^([^\\[\\]]*)/;\n    var children = new RegExp(brackets);\n    var match = prefix.exec(string);\n\n    if (match[1]) {\n        keys.push(match[1]);\n    }\n\n    while ((match = children.exec(string)) !== null) {\n        keys.push(match[1]);\n    }\n\n    return keys;\n}\n\nfunction hash_assign(result, keys, value) {\n    if (keys.length === 0) {\n        result = value;\n        return result;\n    }\n\n    var key = keys.shift();\n    var between = key.match(/^\\[(.+?)\\]$/);\n\n    if (key === '[]') {\n        result = result || [];\n\n        if (Array.isArray(result)) {\n            result.push(hash_assign(null, keys, value));\n        }\n        else {\n            // This might be the result of bad name attributes like \"[][foo]\",\n            // in this case the original `result` object will already be\n            // assigned to an object literal. Rather than coerce the object to\n            // an array, or cause an exception the attribute \"_values\" is\n            // assigned as an array.\n            result._values = result._values || [];\n            result._values.push(hash_assign(null, keys, value));\n        }\n\n        return result;\n    }\n\n    // Key is an attribute name and can be assigned directly.\n    if (!between) {\n        result[key] = hash_assign(result[key], keys, value);\n    }\n    else {\n        var string = between[1];\n        // +var converts the variable into a number\n        // better than parseInt because it doesn't truncate away trailing\n        // letters and actually fails if whole thing is not a number\n        var index = +string;\n\n        // If the characters between the brackets is not a number it is an\n        // attribute name and can be assigned directly.\n        if (isNaN(index)) {\n            result = result || {};\n            result[string] = hash_assign(result[string], keys, value);\n        }\n        else {\n            result = result || [];\n            result[index] = hash_assign(result[index], keys, value);\n        }\n    }\n\n    return result;\n}\n\n// Object/hash encoding serializer.\nfunction hash_serializer(result, key, value) {\n    var matches = key.match(brackets);\n\n    // Has brackets? Use the recursive assignment function to walk the keys,\n    // construct any missing objects in the result tree and make the assignment\n    // at the end of the chain.\n    if (matches) {\n        var keys = parse_keys(key);\n        hash_assign(result, keys, value);\n    }\n    else {\n        // Non bracket notation can make assignments directly.\n        var existing = result[key];\n\n        // If the value has been assigned already (for instance when a radio and\n        // a checkbox have the same name attribute) convert the previous value\n        // into an array before pushing into it.\n        //\n        // NOTE: If this requirement were removed all hash creation and\n        // assignment could go through `hash_assign`.\n        if (existing) {\n            if (!Array.isArray(existing)) {\n                result[key] = [ existing ];\n            }\n\n            result[key].push(value);\n        }\n        else {\n            result[key] = value;\n        }\n    }\n\n    return result;\n}\n\n// urlform encoding serializer\nfunction str_serialize(result, key, value) {\n    // encode newlines as \\r\\n cause the html spec says so\n    value = value.replace(/(\\r)?\\n/g, '\\r\\n');\n    value = encodeURIComponent(value);\n\n    // spaces should be '+' rather than '%20'.\n    value = value.replace(/%20/g, '+');\n    return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + value;\n}\n\nmodule.exports = serialize;\n"],"sourceRoot":""}