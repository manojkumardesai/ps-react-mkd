{"version":3,"sources":["../../../../src/components/time/messages.js","../../../../src/components/time/ReadableTime.js","../../../../src/icons/general/IconTrash.js","../../../../../src/elements/common/selectors/version.js","../../../../src/components/time/index.js","../../../../src/components/inline-error/index.js","../../../../../src/elements/content-sidebar/versions/messages.js","../../../../src/icons/general/IconClockPast.js","../../../../src/icons/general/IconDownload.js","../../../../src/icons/general/IconUpload.js","../../../../../src/elements/content-sidebar/versions/VersionsItemAction.js","../../../../../src/elements/content-sidebar/versions/VersionsItemActions.js","../../../../../src/elements/content-sidebar/versions/VersionsItemButton.js","../../../../../src/elements/content-sidebar/versions/VersionsItemBadge.js","../../../../../src/elements/content-sidebar/versions/VersionsItemRetention.js","../../../../../src/elements/content-sidebar/versions/VersionsItem.js","../../../../../src/elements/content-sidebar/versions/VersionsList.js","../../../../../src/elements/content-sidebar/versions/VersionsGroup.js","../../../../../src/elements/content-sidebar/versions/VersionsMenu.js","../../../../../src/elements/content-sidebar/versions/VersionsSidebar.js","../../../../../src/elements/content-sidebar/versions/VersionsSidebarAPI.js","../../../../../src/elements/content-sidebar/versions/VersionsSidebarContainer.js"],"names":["defineMessages","eventTime","eventTimeToday","eventTimeYesterday","eventTimeDate","eventTimeDateShort","eventTimeWeekdayLong","timestamp","relativeThreshold","ONE_HOUR_MS","allowFutureTimestamps","alwaysShowTime","showWeekday","relativeIfNewerThanTs","Date","shouldShowYear","isCurrentYear","dateMessage","messages","date","weekday","isToday","isYesterday","value","month","day","output","values","time","Math","className","color","height","title","width","viewBox","fill","fillRule","d","getVersionAction","restored_at","trashed_at","version_promoted","action","getVersionUser","modified_by","restored_by","trashed_by","versionsEmpty","versionsPriorWeek","versionsThisMonth","versionsToday","versionsYesterday","versionsTitle","versionCurrent","versionActionDelete","versionActionDeleteError","versionActionDisabledRetention","versionActionDownload","versionActionDownloadError","versionActionPreview","versionActionPromote","versionActionPromoteError","versionActionRestore","versionActionRestoreError","versionActionToggle","versionDeletedBy","versionFetchError","versionLimitExceeded","versionNumberBadge","versionNumberLabel","versionPromotedBy","versionRestoredBy","versionServerError","versionUploadedBy","versionUserUnknown","versionMaxEntries","versionRetentionDelete","versionRetentionIndefinite","versionRetentionRemove","transform","rx","x","y","stroke","strokeLinecap","strokeLinejoin","children","fileId","isCurrent","rest","data-resin-iscurrent","data-resin-itemid","data-resin-target","handleMenuClose","event","handleToggleClick","isRetained","onDelete","onDownload","onPreview","onPromote","onRestore","showDelete","showDownload","showPreview","showPromote","showRestore","constrainToScrollParent","constrainToWindow","isRightAligned","onMenuClose","onClick","type","data-resin-component","data-resin-feature","position","text","isTabbable","isDisabled","VersionsItemButton","isSelected","scrollIntoView","this","prevIsSelected","buttonClassName","classNames","aria-disabled","getDOMRef","React","injectIntl","intl","intlValues","versionNumber","aria-label","RETENTION_MAP","retention","dispositionAt","dispositionAction","retentionLength","dispositionAtTime","ACTION_MAP","isWatermarked","version","versionCount","versionLimit","createdAt","versionId","is_download_available","permissions","restoredAt","size","trashedAt","versionPromoted","can_delete","can_download","can_preview","can_upload","retentionAppliedAt","retentionDispositionAt","retentionDispositionAtDate","versionAction","selectors","versionInteger","parseInt","versionTime","versionTimestamp","versionUserName","isDeleted","isDownloadable","isLimited","isRestricted","canPreview","hasActions","handleAction","handler","name","dateTime","sizeUtil","currentId","versions","key","id","render","match","heading","VersionsMenu","versionGroups","currentGroup","last","groupHeading","currentDate","currentDay","currentSunday","createdAtDate","util","year","getHeading","groups","groupVersions","MAX_VERSIONS","error","isLoading","parentName","showLimit","showVersions","showEmpty","showError","to","crawlerPosition","maxVersions","VersionsSidebarAPI","api","Promise","reject","Error","fields","forceFetch","fileResponse","versionsResponse","file_version","resolve","successCallback","errorCallback","VersionsSidebarContainer","window","selectedVersionId","data","version_limit","getProp","versionsWithPermissions","fileVersion","newVersionId","newVersion","merge","newVersions","history","generatePath","onVersionChange","selectedVersion","currentVersionId","updateVersionToCurrent","prevFileId","prevVersionId","b","a","Component","onVersionDelete","onVersionDownload","onVersionPreview","onVersionPromote","onVersionRestore","flow"],"mappings":"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","file":"static/js/8.7c4b4446.chunk.js","sourcesContent":["// @flow\nimport { defineMessages } from 'react-intl';\n\nconst messages = defineMessages({\n    eventTime: {\n        defaultMessage: '{time, date, medium}',\n        description: 'The time that an event occurred',\n        id: 'boxui.readableTime.eventTime',\n    },\n    eventTimeToday: {\n        defaultMessage: 'Today at {time, time, short}',\n        description: 'The time that an event occurred today',\n        id: 'boxui.readableTime.eventTimeToday',\n    },\n    eventTimeYesterday: {\n        defaultMessage: 'Yesterday at {time, time, short}',\n        description: 'The time that an event occurred yesterday',\n        id: 'boxui.readableTime.eventTimeYesterday',\n    },\n    eventTimeDate: {\n        defaultMessage: '{time, date, medium} at {time, time, short}',\n        description: 'The time that an event occurred at a given date with the year included',\n        id: 'boxui.readableTime.eventTimeDate',\n    },\n    eventTimeDateShort: {\n        defaultMessage: '{date} at {time, time, short}',\n        description: 'The time that an event occurred at a given date without the year included',\n        id: 'boxui.readableTime.eventTimeDateShort',\n    },\n    eventTimeWeekdayLong: {\n        defaultMessage: '{weekday}, {time, date, medium}',\n        description: 'The time that an event occurred at a given date with the weekday included',\n        id: 'boxui.readableTime.eventTimeWeekdayLong',\n    },\n});\n\nexport default messages;\n","// @flow\nimport React from 'react';\nimport { FormattedMessage, FormattedRelative, FormattedDate } from 'react-intl';\n\nimport { ONE_HOUR_MS } from '../../constants';\nimport { isToday, isYesterday, isCurrentYear } from '../../utils/datetime';\n\nimport messages from './messages';\n\ntype Props = {\n    /** A boolean that will cause future timestamps (usually due to incorrect computer time) to be corrected to the isToday message */\n    allowFutureTimestamps?: boolean,\n    /** A boolean that will include the time alongside the date, if the date is shown */\n    alwaysShowTime?: boolean,\n    /** The number of milliseconds before now that a relative (vs. absolute) time should be displayed (Default: 1 hour) */\n    relativeThreshold?: number,\n    /** A boolean that will include the weekday alongside the date, if the date is shown */\n    showWeekday?: boolean,\n    /** The timestamp which should be used to display the date */\n    timestamp: number,\n};\n\nconst ReadableTime = ({\n    timestamp,\n    relativeThreshold = ONE_HOUR_MS,\n    allowFutureTimestamps = true,\n    alwaysShowTime = false,\n    showWeekday = false,\n}: Props) => {\n    const relativeIfNewerThanTs = Date.now() - relativeThreshold;\n    const shouldShowYear = !isCurrentYear(timestamp);\n\n    if (!allowFutureTimestamps && timestamp > Date.now()) {\n        // TODO: what is the reasoning behind this rule?\n        timestamp = relativeIfNewerThanTs; // Default to 'Today' for timestamps that would show a future date\n    }\n\n    // e.g. Oct 5, 2018\n    let dateMessage = messages.eventTime;\n    let date = null;\n    let weekday = null;\n    if (isToday(timestamp)) {\n        // e.g. Today at 12:30 PM\n        dateMessage = messages.eventTimeToday;\n    } else if (isYesterday(timestamp)) {\n        // e.g. Yesterday at 11:30 AM\n        dateMessage = messages.eventTimeYesterday;\n    } else if (showWeekday) {\n        // e.g. Monday, Oct 5, 2018\n        dateMessage = messages.eventTimeWeekdayLong;\n        weekday = <FormattedDate value={timestamp} weekday=\"long\" />;\n    } else if (shouldShowYear && alwaysShowTime) {\n        // e.g. Oct 5, 2018 at 10:30 PM\n        dateMessage = messages.eventTimeDate;\n    } else if (!shouldShowYear && alwaysShowTime) {\n        // e.g. Oct 5 at 10:30 PM\n        dateMessage = messages.eventTimeDateShort;\n        date = <FormattedDate value={timestamp} month=\"short\" day=\"numeric\" />;\n    } else if (!shouldShowYear && !alwaysShowTime) {\n        // e.g. Oct 5\n        return <FormattedDate value={timestamp} month=\"short\" day=\"numeric\" />;\n    }\n\n    let output = <FormattedMessage {...dateMessage} values={{ time: timestamp, date, weekday }} />;\n\n    // if the time stamp is within +/- the relative threshold for the current time,\n    // print the default time format\n    if (Math.abs(Date.now() - timestamp) <= relativeThreshold) {\n        output = <FormattedRelative value={timestamp} />;\n    }\n\n    return output;\n};\n\nexport default ReadableTime;\n","// @flow\nimport * as React from 'react';\nimport { bdlGray80 } from '../../styles/variables';\nimport AccessibleSVG from '../accessible-svg';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconTrash = ({ className = '', color = bdlGray80, height = 16, title, width = 16 }: Props) => (\n    <AccessibleSVG\n        className={`icon-trash ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 16 16\"\n        width={width}\n    >\n        <path\n            className=\"fill-color\"\n            fill={color}\n            fillRule=\"evenodd\"\n            d=\"M14 2l-1.8 11c-.1.6-.7 1-1.2 1H5c-.6 0-1.1-.5-1.2-1L2 2h12zm-1.2 1H3.2l1.6 9.9s.1.1.2.1h6c.06 0 .12-.036.158-.065l.042-.035L12.8 3zm-2.3 1c.3 0 .5.2.5.5s-.2.5-.5.5h-5c-.3 0-.5-.2-.5-.5s.2-.5.5-.5z\"\n        />\n    </AccessibleSVG>\n);\n\nexport default IconTrash;\n","// @flow\nimport {\n    PLACEHOLDER_USER,\n    VERSION_DELETE_ACTION,\n    VERSION_PROMOTE_ACTION,\n    VERSION_RESTORE_ACTION,\n    VERSION_UPLOAD_ACTION,\n} from '../../../constants';\n\ntype VersionAction =\n    | typeof VERSION_DELETE_ACTION\n    | typeof VERSION_PROMOTE_ACTION\n    | typeof VERSION_RESTORE_ACTION\n    | typeof VERSION_UPLOAD_ACTION;\n\nconst getVersionAction = ({ restored_at, trashed_at, version_promoted }: $Shape<BoxItemVersion>): VersionAction => {\n    let action = VERSION_UPLOAD_ACTION;\n\n    if (trashed_at) {\n        action = VERSION_DELETE_ACTION;\n    }\n\n    if (restored_at) {\n        action = VERSION_RESTORE_ACTION;\n    }\n\n    if (version_promoted) {\n        action = VERSION_PROMOTE_ACTION;\n    }\n\n    return action;\n};\n\nconst getVersionUser = ({ modified_by, restored_by, trashed_by }: $Shape<BoxItemVersion>): User => {\n    return restored_by || trashed_by || modified_by || PLACEHOLDER_USER;\n};\n\nexport default {\n    getVersionAction,\n    getVersionUser,\n};\n","// @flow\n// eslint-disable-next-line import/prefer-default-export\nexport { default as ReadableTime } from './ReadableTime';\n","// @flow\nexport { default } from './InlineError';\n","// @flow strict\n\nimport { defineMessages } from 'react-intl';\n\nconst messages = defineMessages({\n    versionsEmpty: {\n        id: 'be.sidebarVersions.empty',\n        description: 'Message to display when no versions are available',\n        defaultMessage: 'No prior versions are available for this file.',\n    },\n    versionsPriorWeek: {\n        id: 'be.sidebarVersions.priorWeek',\n        description: 'Header to display for group of versions created in the prior week',\n        defaultMessage: 'Last Week',\n    },\n    versionsThisMonth: {\n        id: 'be.sidebarVersions.thisMonth',\n        description: 'Header to display for group of versions created in the current month',\n        defaultMessage: 'This Month',\n    },\n    versionsToday: {\n        id: 'be.sidebarVersions.today',\n        description: 'Header to display for group of versions created yesterday',\n        defaultMessage: 'Today',\n    },\n    versionsYesterday: {\n        id: 'be.sidebarVersions.yesterday',\n        description: 'Header to display for group of versions created today',\n        defaultMessage: 'Yesterday',\n    },\n    versionsTitle: {\n        id: 'be.sidebarVersions.title',\n        description: 'Title for the preview versions sidebar',\n        defaultMessage: 'Version History',\n    },\n    versionCurrent: {\n        id: 'be.sidebarVersions.current',\n        defaultMessage: 'Current Version',\n        description: 'Label for the current version item in the version history list.',\n    },\n    versionActionDelete: {\n        id: 'be.sidebarVersions.delete',\n        defaultMessage: 'Delete',\n        description: 'Label for the version delete action.',\n    },\n    versionActionDeleteError: {\n        id: 'be.sidebarVersions.deleteError',\n        defaultMessage: 'File version could not be deleted.',\n        description: 'Error message for the version delete action.',\n    },\n    versionActionDisabledRetention: {\n        id: 'be.sidebarVersions.disabledByRetention',\n        defaultMessage: 'Disabled by retention policy',\n        description: 'Tooltip message for actions disabled by retention policy.',\n    },\n    versionActionDownload: {\n        id: 'be.sidebarVersions.download',\n        defaultMessage: 'Download',\n        description: 'Label for the version download action.',\n    },\n    versionActionDownloadError: {\n        id: 'be.sidebarVersions.downloadError',\n        defaultMessage: 'File version could not be downloaded.',\n        description: 'Error message for the version download action.',\n    },\n    versionActionPreview: {\n        id: 'be.sidebarVersions.preview',\n        defaultMessage: 'Preview',\n        description: 'Label for the version preview action.',\n    },\n    versionActionPromote: {\n        id: 'be.sidebarVersions.promote',\n        defaultMessage: 'Make Current',\n        description: 'Label for the version promote action.',\n    },\n    versionActionPromoteError: {\n        id: 'be.sidebarVersions.promoteError',\n        defaultMessage: 'File version could not be made current.',\n        description: 'Error message for the version promote action.',\n    },\n    versionActionRestore: {\n        id: 'be.sidebarVersions.restore',\n        defaultMessage: 'Restore',\n        description: 'Label for the version restore action.',\n    },\n    versionActionRestoreError: {\n        id: 'be.sidebarVersions.restoreError',\n        defaultMessage: 'File version could not be restored.',\n        description: 'Error message for the version restored action.',\n    },\n    versionActionToggle: {\n        id: 'be.sidebarVersions.toggle',\n        defaultMessage: 'Toggle Actions Menu',\n        description: 'Label for the version actions dropdown menu toggle button.',\n    },\n    versionDeletedBy: {\n        id: 'be.sidebarVersions.deletedBy',\n        defaultMessage: 'Deleted by {name}',\n        description: 'Message displayed for a deleted version. {name} is the user who performed the action.',\n    },\n    versionFetchError: {\n        id: 'be.sidebarVersions.fetchError',\n        defaultMessage: 'File versions could not be retrieved.',\n        description: 'Error message for the versions fetch call.',\n    },\n    versionLimitExceeded: {\n        id: 'be.sidebarVersions.versionLimitExceeded',\n        defaultMessage:\n            'You are limited to the last {versionLimit, number} {versionLimit, plural, one {version} other {versions}}.',\n        description: \"Text displayed if a version exceeds the user's maximum allowed version count\",\n    },\n    versionNumberBadge: {\n        id: 'be.sidebarVersions.versionNumberBadge',\n        defaultMessage: 'V{versionNumber}',\n        description: 'Text to display in the version badge.',\n    },\n    versionNumberLabel: {\n        id: 'be.sidebarVersions.versionNumberLabel',\n        defaultMessage: 'Version number {versionNumber}',\n        description: 'Label given to the version badge for screen readers.',\n    },\n    versionPromotedBy: {\n        id: 'be.sidebarVersions.promotedBy',\n        defaultMessage: 'Promoted from v{versionPromoted} by {name}',\n        description: 'Message displayed for a restored version. {name} is the user who performed the action.',\n    },\n    versionRestoredBy: {\n        id: 'be.sidebarVersions.restoredBy',\n        defaultMessage: 'Restored by {name}',\n        description: 'Message displayed for a restored version. {name} is the user who performed the action.',\n    },\n    versionServerError: {\n        id: 'be.sidebarVersions.serverError',\n        defaultMessage: 'Server Error',\n        description: 'Heading for inline error messages displayed due to a remote server issue.',\n    },\n    versionUploadedBy: {\n        id: 'be.sidebarVersions.uploadedBy',\n        defaultMessage: 'Uploaded by {name}',\n        description: 'Message displayed for an uploaded version. {name} is the user who performed the action.',\n    },\n    versionUserUnknown: {\n        id: 'be.sidebarVersions.versionUserUnknown',\n        defaultMessage: 'Unknown',\n        description: 'Name displayed for unknown or deleted users.',\n    },\n    versionMaxEntries: {\n        id: 'be.sidebarVersions.versionMaxEntries',\n        defaultMessage: 'Version history is limited to the last {maxVersions} entries.',\n        description: 'Max supported entries for version history',\n    },\n    versionRetentionDelete: {\n        id: 'be.sidebarVersions.versionRetentionDelete',\n        defaultMessage: 'Will be deleted {time} by retention policy.',\n        description: 'Message describing when the version will be deleted due to an applied retention policy.',\n    },\n    versionRetentionIndefinite: {\n        id: 'be.sidebarVersions.versionRetentionIndefinite',\n        defaultMessage: 'Retained indefinitely by retention policy.',\n        description: 'Message describing that the version retention policy is indefinite and will not expire.',\n    },\n    versionRetentionRemove: {\n        id: 'be.sidebarVersions.versionRetentionRemove',\n        defaultMessage: 'Retention policy expires on {time}.',\n        description: 'Message describing when the version retention policy will expire.',\n    },\n});\n\nexport default messages;\n","// @flow\nimport * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconClockPast = ({ className = '', color = '#444', height = 14, title, width = 16 }: Props) => (\n    <AccessibleSVG\n        className={`icon-clock-past ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 16 14\"\n        width={width}\n    >\n        <g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(0 1)\">\n            <rect className=\"fill-color\" fill={color} height=\"5\" rx=\".5\" width=\"1\" x=\"9.66\" y=\"3\" />\n            <rect className=\"fill-color\" fill={color} height=\"1\" rx=\".5\" width=\"3\" x=\"9.66\" y=\"7\" />\n            <path\n                className=\"stroke-color\"\n                d=\"M5.66 10.62C6.697 11.48 8.032 12 9.487 12c3.314 0 6-2.686 6-6s-2.686-6-6-6c-3.313 0-6 2.686-6 6\"\n                stroke={color}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path className=\"fill-color\" d=\"M6.317 5l-2.83 2.828L.66 5\" fill={color} />\n        </g>\n    </AccessibleSVG>\n);\n\nexport default IconClockPast;\n","// @flow\nimport * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\nimport { bdlGray80 } from '../../styles/variables';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconDownload = ({ className = '', color = bdlGray80, height = 16, title, width = 16 }: Props) => (\n    <AccessibleSVG\n        className={`icon-download ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 16 16\"\n        width={width}\n    >\n        <path\n            className=\"fill-color\"\n            fill={color}\n            fillRule=\"evenodd\"\n            d=\"M14 14v1H2v-1h12zM10.996 2v4.997H14L8 13 2 6.997h3.004V2h5.992zm-.998 1H6.002v4.996h-1.59L8 11.586l3.589-3.59H9.998V3z\"\n        />\n    </AccessibleSVG>\n);\n\nexport default IconDownload;\n","// @flow\nimport * as React from 'react';\nimport { bdlGray80 } from '../../styles/variables';\nimport AccessibleSVG from '../accessible-svg';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconUpload = ({ className = '', color = bdlGray80, height = 16, title, width = 16 }: Props) => (\n    <AccessibleSVG\n        className={`icon-upload ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 16 16\"\n        width={width}\n    >\n        <path\n            className=\"fill-color\"\n            fill={color}\n            fillRule=\"evenodd\"\n            d=\"M14 14v1H2v-1h12zM8 1l6 6.003h-3.004V12H5.004V7.003H2L8 1zm0 1.413l-3.589 3.59h1.591v4.998h3.996V6.004h1.59L8 2.414z\"\n        />\n    </AccessibleSVG>\n);\n\nexport default IconUpload;\n","/**\n * @flow strict\n * @file Versions Item Action component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { MenuItem } from '../../../components/menu';\nimport './VersionsItemAction.scss';\n\ntype Props = {\n    action: string,\n    children: React.Node,\n    fileId: string,\n    isCurrent: boolean,\n};\n\nconst VersionsItemAction = ({ action, children, fileId, isCurrent, ...rest }: Props) => (\n    <MenuItem\n        className=\"bcs-VersionsItemAction\"\n        data-resin-iscurrent={isCurrent}\n        data-resin-itemid={fileId}\n        data-resin-target={action}\n        {...rest}\n    >\n        {children}\n    </MenuItem>\n);\n\nexport default VersionsItemAction;\n","/**\n * @flow\n * @file Versions Item Actions component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport DropdownMenu from '../../../components/dropdown-menu';\nimport IconClockPast from '../../../icons/general/IconClockPast';\nimport IconDownload from '../../../icons/general/IconDownload';\nimport IconEllipsis from '../../../icons/general/IconEllipsis';\nimport IconOpenWith from '../../../icons/general/IconOpenWith';\nimport IconTrash from '../../../icons/general/IconTrash';\nimport IconUpload from '../../../icons/general/IconUpload';\nimport messages from './messages';\nimport PlainButton from '../../../components/plain-button';\nimport Tooltip from '../../../components/tooltip/Tooltip';\nimport VersionsItemAction from './VersionsItemAction';\nimport { Menu } from '../../../components/menu';\nimport './VersionsItemActions.scss';\n\ntype Props = {\n    fileId: string,\n    isCurrent?: boolean,\n    isRetained?: boolean,\n    onDelete?: () => void,\n    onDownload?: () => void,\n    onPreview?: () => void,\n    onPromote?: () => void,\n    onRestore?: () => void,\n    showDelete?: boolean,\n    showDownload?: boolean,\n    showPreview?: boolean,\n    showPromote?: boolean,\n    showRestore?: boolean,\n};\n\nconst handleMenuClose = (event: SyntheticEvent<>) => {\n    event.stopPropagation();\n};\n\nconst handleToggleClick = (event: SyntheticMouseEvent<HTMLButtonElement>) => {\n    event.stopPropagation();\n};\n\nconst VersionsItemActions = ({\n    fileId,\n    isCurrent = false,\n    isRetained = false,\n    onDelete,\n    onDownload,\n    onPreview,\n    onPromote,\n    onRestore,\n    showDelete = false,\n    showDownload = false,\n    showPreview = false,\n    showPromote = false,\n    showRestore = false,\n}: Props) => {\n    if (!showDelete && !showDownload && !showPreview && !showPromote && !showRestore) {\n        return null;\n    }\n\n    return (\n        <DropdownMenu\n            className=\"bcs-VersionsItemActions\"\n            constrainToScrollParent\n            constrainToWindow\n            isRightAligned\n            onMenuClose={handleMenuClose}\n        >\n            <PlainButton\n                className=\"bcs-VersionsItemActions-toggle\"\n                data-resin-iscurrent={isCurrent}\n                data-resin-itemid={fileId}\n                data-resin-target=\"overflow\"\n                onClick={handleToggleClick}\n                type=\"button\"\n            >\n                <IconEllipsis height={4} width={14} />\n                <FormattedMessage {...messages.versionActionToggle}>\n                    {(text: string) => <span className=\"accessibility-hidden\">{text}</span>}\n                </FormattedMessage>\n            </PlainButton>\n\n            <Menu\n                className=\"bcs-VersionsItemActions-menu\"\n                data-resin-component=\"preview\" // Needed for resin events due to tether moving menu to body\n                data-resin-feature=\"versions\" // Needed for resin events due to tether moving menu to body\n            >\n                {showPreview && (\n                    <VersionsItemAction action=\"preview\" fileId={fileId} isCurrent={isCurrent} onClick={onPreview}>\n                        <IconOpenWith />\n                        <FormattedMessage {...messages.versionActionPreview} />\n                    </VersionsItemAction>\n                )}\n\n                {showDownload && (\n                    <VersionsItemAction action=\"download\" fileId={fileId} isCurrent={isCurrent} onClick={onDownload}>\n                        <IconDownload />\n                        <FormattedMessage {...messages.versionActionDownload} />\n                    </VersionsItemAction>\n                )}\n                {showPromote && (\n                    <VersionsItemAction action=\"promote\" fileId={fileId} isCurrent={isCurrent} onClick={onPromote}>\n                        <IconUpload />\n                        <FormattedMessage {...messages.versionActionPromote} />\n                    </VersionsItemAction>\n                )}\n                {showRestore && (\n                    <VersionsItemAction action=\"restore\" fileId={fileId} isCurrent={isCurrent} onClick={onRestore}>\n                        <IconClockPast height={14} width={14} />\n                        <FormattedMessage {...messages.versionActionRestore} />\n                    </VersionsItemAction>\n                )}\n                {showDelete && (\n                    <Tooltip\n                        position=\"middle-left\"\n                        text={<FormattedMessage {...messages.versionActionDisabledRetention} />}\n                        isTabbable={false}\n                        isDisabled={!isRetained}\n                    >\n                        <VersionsItemAction\n                            action=\"remove\"\n                            fileId={fileId}\n                            isCurrent={isCurrent}\n                            isDisabled={isRetained}\n                            onClick={onDelete}\n                        >\n                            <IconTrash />\n                            <FormattedMessage {...messages.versionActionDelete} />\n                        </VersionsItemAction>\n                    </Tooltip>\n                )}\n            </Menu>\n        </DropdownMenu>\n    );\n};\n\nexport default VersionsItemActions;\n","/**\n * @flow\n * @file Versions Item Button component\n * @author Box\n */\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport PlainButton from '../../../components/plain-button';\nimport { scrollIntoView } from '../../../utils/dom';\nimport './VersionsItemButton.scss';\n\ntype Props = {\n    children: React.Node,\n    fileId: string,\n    isCurrent: boolean,\n    isDisabled: boolean,\n    isSelected: boolean,\n    onClick: (event: SyntheticMouseEvent<HTMLButtonElement>) => void,\n};\n\nclass VersionsItemButton extends React.Component<Props> {\n    static defaultProps = {\n        isCurrent: false,\n        isDisabled: false,\n        isSelected: false,\n    };\n\n    buttonRef: ?HTMLButtonElement;\n\n    componentDidMount() {\n        this.setScroll();\n    }\n\n    componentDidUpdate({ isSelected: prevIsSelected }: Props) {\n        const { isSelected } = this.props;\n\n        if (isSelected !== prevIsSelected) {\n            this.setScroll();\n        }\n    }\n\n    setButtonRef = (buttonRef: ?HTMLButtonElement): void => {\n        this.buttonRef = buttonRef;\n    };\n\n    setScroll = () => {\n        const { isSelected } = this.props;\n\n        if (this.buttonRef && isSelected) {\n            scrollIntoView(this.buttonRef);\n        }\n    };\n\n    render() {\n        const { children, fileId, isCurrent, isDisabled, isSelected, onClick } = this.props;\n        const buttonClassName = classNames('bcs-VersionsItemButton', {\n            'bcs-is-disabled': isDisabled,\n            'bcs-is-selected': isSelected && !isDisabled,\n        });\n\n        return (\n            <PlainButton\n                aria-disabled={isDisabled}\n                className={buttonClassName}\n                data-resin-iscurrent={isCurrent}\n                data-resin-itemid={fileId}\n                data-resin-target=\"select\"\n                data-testid=\"versions-item-button\"\n                getDOMRef={this.setButtonRef}\n                isDisabled={isDisabled}\n                onClick={onClick}\n                type=\"button\"\n            >\n                {children}\n            </PlainButton>\n        );\n    }\n}\n\nexport default VersionsItemButton;\n","/**\n * @flow\n * @file Versions Item Badge component\n * @author Box\n */\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport type { intlShape } from 'react-intl';\nimport messages from './messages';\nimport './VersionsItemBadge.scss';\n\ntype Props = {\n    intl: intlShape,\n    versionNumber: string,\n};\n\nconst VersionsItemBadge = ({ intl, versionNumber }: Props) => {\n    const intlValues = { versionNumber };\n\n    return (\n        <div aria-label={intl.formatMessage(messages.versionNumberLabel, intlValues)} className=\"bcs-VersionsItemBadge\">\n            <FormattedMessage {...messages.versionNumberBadge} values={intlValues} />\n        </div>\n    );\n};\n\nexport default injectIntl(VersionsItemBadge);\n","/**\n * @flow strict\n * @file Versions Item Retention component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { ReadableTime } from '../../../components/time';\nimport {\n    VERSION_RETENTION_DELETE_ACTION,\n    VERSION_RETENTION_REMOVE_ACTION,\n    VERSION_RETENTION_INDEFINITE,\n} from '../../../constants';\nimport messages from './messages';\n\ntype Props = {\n    retention?: BoxItemVersionRetention,\n};\n\nconst RETENTION_MAP = {\n    [VERSION_RETENTION_DELETE_ACTION]: messages.versionRetentionDelete,\n    [VERSION_RETENTION_REMOVE_ACTION]: messages.versionRetentionRemove,\n};\n\nconst VersionsItemRetention = ({ retention }: Props) => {\n    const { disposition_at: dispositionAt, winning_retention_policy: retentionPolicy } = retention || {};\n    const { disposition_action: dispositionAction, retention_length: retentionLength } = retentionPolicy || {};\n    const dispositionAtTime = dispositionAt && new Date(dispositionAt).getTime();\n\n    if (!dispositionAction) {\n        return null;\n    }\n\n    return retentionLength === VERSION_RETENTION_INDEFINITE || !dispositionAtTime ? (\n        <FormattedMessage {...messages.versionRetentionIndefinite} />\n    ) : (\n        <FormattedMessage\n            {...RETENTION_MAP[dispositionAction]}\n            values={{\n                time: <ReadableTime timestamp={dispositionAtTime} showWeekday />,\n            }}\n        />\n    );\n};\n\nexport default VersionsItemRetention;\n","/**\n * @flow\n * @file Versions Item component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport messages from './messages';\nimport selectors from '../../common/selectors/version';\nimport sizeUtil from '../../../utils/size';\nimport VersionsItemActions from './VersionsItemActions';\nimport VersionsItemButton from './VersionsItemButton';\nimport VersionsItemBadge from './VersionsItemBadge';\nimport VersionsItemRetention from './VersionsItemRetention';\nimport { ReadableTime } from '../../../components/time';\nimport {\n    VERSION_DELETE_ACTION,\n    VERSION_PROMOTE_ACTION,\n    VERSION_RESTORE_ACTION,\n    VERSION_UPLOAD_ACTION,\n} from '../../../constants';\nimport type { VersionActionCallback } from './flowTypes';\nimport './VersionsItem.scss';\n\ntype Props = {\n    fileId: string,\n    isCurrent?: boolean,\n    isSelected?: boolean,\n    isWatermarked?: boolean,\n    onDelete?: VersionActionCallback,\n    onDownload?: VersionActionCallback,\n    onPreview?: VersionActionCallback,\n    onPromote?: VersionActionCallback,\n    onRestore?: VersionActionCallback,\n    version: BoxItemVersion,\n    versionCount: number,\n    versionLimit: number,\n};\n\nconst ACTION_MAP = {\n    [VERSION_DELETE_ACTION]: messages.versionDeletedBy,\n    [VERSION_RESTORE_ACTION]: messages.versionRestoredBy,\n    [VERSION_PROMOTE_ACTION]: messages.versionPromotedBy,\n    [VERSION_UPLOAD_ACTION]: messages.versionUploadedBy,\n};\nconst FIVE_MINUTES_MS = 5 * 60 * 1000;\n\nconst VersionsItem = ({\n    fileId,\n    isCurrent = false,\n    isSelected = false,\n    isWatermarked = false,\n    onDelete,\n    onDownload,\n    onPreview,\n    onPromote,\n    onRestore,\n    version,\n    versionCount,\n    versionLimit,\n}: Props) => {\n    const {\n        created_at: createdAt,\n        id: versionId,\n        is_download_available,\n        permissions = {},\n        restored_at: restoredAt,\n        retention,\n        size,\n        trashed_at: trashedAt,\n        version_number: versionNumber,\n        version_promoted: versionPromoted,\n    } = version;\n    const { can_delete, can_download, can_preview, can_upload } = permissions;\n    const { applied_at: retentionAppliedAt, disposition_at: retentionDispositionAt } = retention || {};\n    const retentionDispositionAtDate = retentionDispositionAt && new Date(retentionDispositionAt);\n\n    // Version info helpers\n    const versionAction = selectors.getVersionAction(version);\n    const versionInteger = versionNumber ? parseInt(versionNumber, 10) : 1;\n    const versionTime = restoredAt || trashedAt || createdAt;\n    const versionTimestamp = versionTime && new Date(versionTime).getTime();\n    const versionUserName = selectors.getVersionUser(version).name || (\n        <FormattedMessage {...messages.versionUserUnknown} />\n    );\n\n    // Version state helpers\n    const isDeleted = versionAction === VERSION_DELETE_ACTION;\n    const isDownloadable = !!is_download_available;\n    const isLimited = versionCount - versionInteger >= versionLimit;\n    const isRestricted = isWatermarked && !isCurrent; // Watermarked files do not support prior version preview\n    const isRetained = !!retentionAppliedAt && (!retentionDispositionAtDate || retentionDispositionAtDate > new Date());\n\n    // Version action helpers\n    const canPreview = can_preview && !isDeleted && !isLimited && !isRestricted;\n    const showDelete = can_delete && !isDeleted && !isCurrent;\n    const showDownload = can_download && !isDeleted && isDownloadable;\n    const showPromote = can_upload && !isDeleted && !isCurrent;\n    const showRestore = can_delete && isDeleted;\n    const showPreview = canPreview && !isSelected;\n    const hasActions = showDelete || showDownload || showPreview || showPromote || showRestore;\n\n    // Version action callback helper\n    const handleAction = (handler?: VersionActionCallback) => (): void => {\n        if (handler) {\n            handler(versionId);\n        }\n    };\n\n    return (\n        <div className=\"bcs-VersionsItem\">\n            <VersionsItemButton\n                fileId={fileId}\n                isCurrent={isCurrent}\n                isDisabled={!canPreview}\n                isSelected={isSelected}\n                onClick={handleAction(onPreview)}\n            >\n                <div className=\"bcs-VersionsItem-badge\">\n                    <VersionsItemBadge versionNumber={versionNumber} />\n                </div>\n\n                <div className=\"bcs-VersionsItem-details\">\n                    {isCurrent && (\n                        <div className=\"bcs-VersionsItem-current\">\n                            <FormattedMessage {...messages.versionCurrent} />\n                        </div>\n                    )}\n\n                    <div className=\"bcs-VersionsItem-log\" data-testid=\"bcs-VersionsItem-log\" title={versionUserName}>\n                        <FormattedMessage\n                            {...ACTION_MAP[versionAction]}\n                            values={{ name: versionUserName, versionPromoted }}\n                        />\n                    </div>\n\n                    <div className=\"bcs-VersionsItem-info\">\n                        {versionTimestamp && (\n                            <time className=\"bcs-VersionsItem-date\" dateTime={versionTime}>\n                                <ReadableTime\n                                    alwaysShowTime\n                                    relativeThreshold={FIVE_MINUTES_MS}\n                                    timestamp={versionTimestamp}\n                                />\n                            </time>\n                        )}\n                        {!!size && <span className=\"bcs-VersionsItem-size\">{sizeUtil(size)}</span>}\n                    </div>\n\n                    {isRetained && (\n                        <div className=\"bcs-VersionsItem-retention\">\n                            <VersionsItemRetention retention={retention} />\n                        </div>\n                    )}\n\n                    {isLimited && hasActions && (\n                        <div className=\"bcs-VersionsItem-footer\">\n                            <FormattedMessage {...messages.versionLimitExceeded} values={{ versionLimit }} />\n                        </div>\n                    )}\n                </div>\n            </VersionsItemButton>\n\n            {!isLimited && hasActions && (\n                <VersionsItemActions\n                    fileId={fileId}\n                    isCurrent={isCurrent}\n                    isRetained={isRetained}\n                    onDelete={handleAction(onDelete)}\n                    onDownload={handleAction(onDownload)}\n                    onPreview={handleAction(onPreview)}\n                    onPromote={handleAction(onPromote)}\n                    onRestore={handleAction(onRestore)}\n                    showDelete={showDelete}\n                    showDownload={showDownload}\n                    showPreview={showPreview}\n                    showPromote={showPromote}\n                    showRestore={showRestore}\n                />\n            )}\n        </div>\n    );\n};\nexport default VersionsItem;\n","/**\n * @flow\n * @file Versions List component\n * @author Box\n */\n\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport VersionsItem from './VersionsItem';\nimport './VersionsList.scss';\n\ntype Props = {\n    currentId?: string,\n    fileId: string,\n    versionCount: number,\n    versionLimit: number,\n    versions: Array<BoxItemVersion>,\n};\n\nconst VersionsList = ({ currentId, versions, ...rest }: Props) => (\n    <ul className=\"bcs-VersionsList\">\n        {versions.map(version => (\n            <li className=\"bcs-VersionsList-item\" key={version.id}>\n                <Route\n                    render={({ match }) => (\n                        <VersionsItem\n                            isCurrent={currentId === version.id}\n                            isSelected={match.params.versionId === version.id}\n                            version={version}\n                            {...rest}\n                        />\n                    )}\n                />\n            </li>\n        ))}\n    </ul>\n);\n\nexport default VersionsList;\n","/**\n * @flow\n * @file Versions Group component\n * @author Box\n */\n\nimport React from 'react';\nimport VersionsList from './VersionsList';\nimport './VersionsGroup.scss';\n\ntype Props = {\n    fileId: string,\n    heading: string,\n    versionCount: number,\n    versionLimit: number,\n    versions: Array<BoxItemVersion>,\n};\n\nconst VersionsGroup = ({ heading, ...rest }: Props) => {\n    return (\n        <section className=\"bcs-VersionsGroup\">\n            <h1 className=\"bcs-VersionsGroup-heading\">{heading}</h1>\n            <VersionsList {...rest} />\n        </section>\n    );\n};\n\nexport default VersionsGroup;\n","/**\n * @flow\n * @file Versions Menu component\n * @author Box\n */\n\nimport React from 'react';\nimport last from 'lodash/last';\nimport { injectIntl, type intlShape } from 'react-intl';\nimport * as util from '../../../utils/datetime';\nimport messages from './messages';\nimport VersionsGroup from './VersionsGroup';\nimport './VersionsMenu.scss';\n\ntype Props = {\n    fileId: string,\n    intl: intlShape,\n    versionCount: number,\n    versionLimit: number,\n    versions: Array<BoxItemVersion>,\n};\n\ntype VersionGroups = Array<{ groupHeading: string, groupVersions: Array<BoxItemVersion> }>;\n\nconst getHeading = ({ intl, version }: { intl: intlShape, version: BoxItemVersion }): string => {\n    const { created_at: createdAt } = version;\n    const currentDate = new Date();\n    const currentDay = currentDate.getDay();\n    const currentSunday = currentDate.getDate() - currentDay;\n    const createdAtDate = util.convertToDate(createdAt);\n    let heading;\n\n    if (util.isToday(createdAtDate)) {\n        heading = intl.formatMessage(messages.versionsToday); // Today\n    } else if (util.isYesterday(createdAtDate)) {\n        heading = intl.formatMessage(messages.versionsYesterday); // Yesterday\n    } else if (!util.isCurrentYear(createdAtDate)) {\n        heading = intl.formatDate(createdAt, { year: 'numeric' }); // 2018\n    } else if (!util.isCurrentMonth(createdAtDate)) {\n        heading = intl.formatDate(createdAt, { month: 'long' }); // January\n    } else if (createdAtDate.getDate() <= currentSunday - 7) {\n        heading = intl.formatMessage(messages.versionsThisMonth); // This Month\n    } else if (createdAtDate.getDate() <= currentSunday) {\n        heading = intl.formatMessage(messages.versionsPriorWeek); // Last Week\n    } else {\n        heading = intl.formatDate(createdAt, { weekday: 'long' }); // Monday\n    }\n\n    return heading;\n};\n\nconst VersionsMenu = React.memo<Props>(({ intl, versions, ...rest }: Props) => {\n    const { id: currentId } = versions[0] || {};\n\n    // Build an ordered set of groups with headings based on the original order of the versions array\n    const versionGroups = versions.reduce((groups: VersionGroups, version: BoxItemVersion): VersionGroups => {\n        const currentGroup = last(groups);\n        const groupHeading = getHeading({ intl, version });\n\n        // Push a new group if there are no groups or if the heading has changed\n        if (!currentGroup || currentGroup.groupHeading !== groupHeading) {\n            groups.push({\n                groupHeading,\n                groupVersions: [],\n            });\n        }\n\n        // Push the sorted version to the newest group's versions collection\n        last(groups).groupVersions.push(version);\n\n        return groups;\n    }, []);\n\n    return (\n        <ul className=\"bcs-VersionsMenu\">\n            {versionGroups.map(({ groupHeading, groupVersions }) => (\n                <li className=\"bcs-VersionsMenu-item\" key={groupHeading}>\n                    <VersionsGroup currentId={currentId} heading={groupHeading} versions={groupVersions} {...rest} />\n                </li>\n            ))}\n        </ul>\n    );\n});\n\nexport default injectIntl(VersionsMenu);\n","/**\n * @flow\n * @file Versions Sidebar component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport InlineError from '../../../components/inline-error';\nimport messages from './messages';\nimport SidebarContent from '../SidebarContent';\nimport VersionsMenu from './VersionsMenu';\nimport { BackButton } from '../../common/nav-button';\nimport { DEFAULT_FETCH_END } from '../../../constants';\nimport { LoadingIndicatorWrapper } from '../../../components/loading-indicator';\nimport './VersionsSidebar.scss';\n\nconst MAX_VERSIONS = DEFAULT_FETCH_END;\n\ntype Props = {\n    error?: MessageDescriptor,\n    fileId: string,\n    isLoading: boolean,\n    parentName: string,\n    versionCount: number,\n    versionLimit: number,\n    versions: Array<BoxItemVersion>,\n};\n\nconst VersionsSidebar = ({ error, isLoading, parentName, versions, ...rest }: Props) => {\n    const showLimit = versions.length >= MAX_VERSIONS;\n    const showVersions = !!versions.length;\n    const showEmpty = !isLoading && !showVersions;\n    const showError = !!error;\n\n    return (\n        <SidebarContent\n            className=\"bcs-Versions\"\n            data-resin-component=\"preview\"\n            data-resin-feature=\"versions\"\n            title={\n                <>\n                    <BackButton data-resin-target=\"back\" to={`/${parentName}`} />\n                    <FormattedMessage {...messages.versionsTitle} />\n                </>\n            }\n        >\n            <LoadingIndicatorWrapper className=\"bcs-Versions-content\" crawlerPosition=\"top\" isLoading={isLoading}>\n                {showError && (\n                    <InlineError title={<FormattedMessage {...messages.versionServerError} />}>\n                        <FormattedMessage {...error} />\n                    </InlineError>\n                )}\n\n                {showEmpty && (\n                    <div className=\"bcs-Versions-empty\">\n                        <FormattedMessage {...messages.versionsEmpty} />\n                    </div>\n                )}\n\n                {showVersions && (\n                    <div className=\"bcs-Versions-menu\">\n                        <VersionsMenu versions={versions} {...rest} />\n                    </div>\n                )}\n                {showLimit && (\n                    <div className=\"bcs-Versions-maxEntries\" data-testid=\"max-versions\">\n                        <FormattedMessage\n                            {...messages.versionMaxEntries}\n                            values={{\n                                maxVersions: MAX_VERSIONS,\n                            }}\n                        />\n                    </div>\n                )}\n            </LoadingIndicatorWrapper>\n        </SidebarContent>\n    );\n};\n\nexport default VersionsSidebar;\n","/**\n * @flow\n * @file Versions Sidebar API Helper\n * @author Box\n */\nimport API from '../../../api';\nimport { FILE_VERSION_FIELDS_TO_FETCH } from '../../../utils/fields';\n\nexport type fetchPayload = [BoxItem, FileVersions];\n\nexport default class VersionsSidebarAPI {\n    api: API;\n\n    fileId: string;\n\n    constructor({ api, fileId }: { api: API, fileId: string }) {\n        this.api = api;\n        this.fileId = fileId;\n    }\n\n    fetchData = (): Promise<fetchPayload> => {\n        return Promise.all([this.fetchFile(), this.fetchVersions()]).then(this.fetchVersionCurrent);\n    };\n\n    fetchDownloadUrl = (version: ?BoxItemVersion): Promise<string> => {\n        return new Promise((resolve, reject) => {\n            if (!version) {\n                return reject(new Error('Could not find requested version'));\n            }\n\n            return this.api.getFileAPI().getDownloadUrl(this.fileId, version, resolve, reject);\n        });\n    };\n\n    fetchFile = (): Promise<BoxItem> => {\n        return new Promise((resolve, reject) =>\n            this.api.getFileAPI().getFile(this.fileId, resolve, reject, {\n                fields: FILE_VERSION_FIELDS_TO_FETCH,\n                forceFetch: true,\n            }),\n        );\n    };\n\n    fetchVersions = (): Promise<FileVersions> => {\n        return new Promise((resolve, reject) =>\n            this.api.getVersionsAPI(false).getVersions(this.fileId, resolve, reject),\n        );\n    };\n\n    fetchVersionCurrent = ([fileResponse, versionsResponse]: fetchPayload): Promise<fetchPayload> => {\n        const { file_version = {} } = fileResponse;\n\n        return new Promise((resolve, reject) =>\n            this.api.getVersionsAPI(false).getVersion(\n                this.fileId,\n                file_version.id,\n                (currentVersionResponse: BoxItemVersion) => {\n                    resolve([\n                        fileResponse,\n                        this.api\n                            .getVersionsAPI(false)\n                            .addCurrentVersion(currentVersionResponse, versionsResponse, fileResponse),\n                    ]);\n                },\n                reject,\n            ),\n        );\n    };\n\n    fetchVersion = (versionId: string): Promise<BoxItemVersion> => {\n        return new Promise((resolve, reject) =>\n            this.api.getVersionsAPI(false).getVersion(this.fileId, versionId, resolve, reject),\n        );\n    };\n\n    deleteVersion = (version: ?BoxItemVersion): Promise<null> => {\n        const { id: versionId, permissions = {} } = version || {};\n\n        return new Promise((resolve, reject) =>\n            this.api.getVersionsAPI(false).deleteVersion({\n                fileId: this.fileId,\n                permissions,\n                successCallback: resolve,\n                errorCallback: reject,\n                versionId,\n            }),\n        );\n    };\n\n    promoteVersion = (version: ?BoxItemVersion): Promise<BoxItemVersion> => {\n        const { id: versionId, permissions = {} } = version || {};\n\n        return new Promise((resolve, reject) =>\n            this.api.getVersionsAPI(false).promoteVersion({\n                fileId: this.fileId,\n                permissions,\n                successCallback: resolve,\n                errorCallback: reject,\n                versionId,\n            }),\n        );\n    };\n\n    restoreVersion = (version: ?BoxItemVersion): Promise<any> => {\n        const { id: versionId, permissions = {} } = version || {};\n\n        return new Promise((resolve, reject) =>\n            this.api.getVersionsAPI(false).restoreVersion({\n                fileId: this.fileId,\n                permissions,\n                successCallback: resolve,\n                errorCallback: reject,\n                versionId,\n            }),\n        );\n    };\n}\n","/**\n * @flow\n * @file Versions Sidebar container\n * @author Box\n */\n\nimport React from 'react';\nimport flow from 'lodash/flow';\nimport getProp from 'lodash/get';\nimport merge from 'lodash/merge';\nimport noop from 'lodash/noop';\nimport { generatePath, withRouter } from 'react-router-dom';\nimport type { Match, RouterHistory } from 'react-router-dom';\nimport type { MessageDescriptor } from 'react-intl';\nimport API from '../../../api';\nimport messages from './messages';\nimport openUrlInsideIframe from '../../../utils/iframe';\nimport VersionsSidebar from './VersionsSidebar';\nimport VersionsSidebarAPI from './VersionsSidebarAPI';\nimport { withAPIContext } from '../../common/api-context';\nimport type { VersionActionCallback, VersionChangeCallback } from './flowTypes';\n\ntype Props = {\n    api: API,\n    fileId: string,\n    history: RouterHistory,\n    match: Match,\n    onVersionChange: VersionChangeCallback,\n    onVersionDelete: VersionActionCallback,\n    onVersionDownload: VersionActionCallback,\n    onVersionPreview: VersionActionCallback,\n    onVersionPromote: VersionActionCallback,\n    onVersionRestore: VersionActionCallback,\n    parentName: string,\n    versionId?: string,\n};\n\ntype State = {\n    error?: MessageDescriptor,\n    isLoading: boolean,\n    isWatermarked: boolean,\n    versionCount: number,\n    versionLimit: number,\n    versions: Array<BoxItemVersion>,\n};\n\nclass VersionsSidebarContainer extends React.Component<Props, State> {\n    static defaultProps = {\n        onVersionChange: noop,\n        onVersionDelete: noop,\n        onVersionDownload: noop,\n        onVersionPreview: noop,\n        onVersionPromote: noop,\n        onVersionRestore: noop,\n        parentName: '',\n    };\n\n    api: VersionsSidebarAPI;\n\n    props: Props;\n\n    state: State = {\n        isLoading: true,\n        isWatermarked: false,\n        versionCount: Infinity,\n        versionLimit: Infinity,\n        versions: [],\n    };\n\n    window: any = window;\n\n    componentDidMount() {\n        this.initialize();\n        this.fetchData();\n    }\n\n    componentDidUpdate({ fileId: prevFileId, versionId: prevVersionId }: Props) {\n        const { fileId, versionId } = this.props;\n\n        if (fileId !== prevFileId) {\n            this.refresh();\n        }\n\n        if (versionId !== prevVersionId) {\n            this.verifyVersion();\n        }\n    }\n\n    componentWillUnmount() {\n        // Reset the current version id since the wrapping route is no longer active\n        this.props.onVersionChange(null);\n    }\n\n    handleActionDelete = (versionId: string): Promise<void> => {\n        this.setState({ isLoading: true });\n\n        return this.api\n            .deleteVersion(this.findVersion(versionId))\n            .then(() => this.api.fetchVersion(versionId))\n            .then(this.handleDeleteSuccess)\n            .then(() => this.props.onVersionDelete(versionId))\n            .catch(() => this.handleActionError(messages.versionActionDeleteError));\n    };\n\n    handleActionDownload = (versionId: string): Promise<void> => {\n        return this.api\n            .fetchDownloadUrl(this.findVersion(versionId))\n            .then(openUrlInsideIframe)\n            .then(() => this.props.onVersionDownload(versionId))\n            .catch(() => this.handleActionError(messages.versionActionDownloadError));\n    };\n\n    handleActionPreview = (versionId: string): void => {\n        this.updateVersion(versionId);\n        this.props.onVersionPreview(versionId);\n    };\n\n    handleActionPromote = (versionId: string): Promise<void> => {\n        this.setState({ isLoading: true });\n\n        return this.api\n            .promoteVersion(this.findVersion(versionId))\n            .then(this.api.fetchData)\n            .then(this.handleFetchSuccess)\n            .then(this.handlePromoteSuccess)\n            .then(() => this.props.onVersionPromote(versionId))\n            .catch(() => this.handleActionError(messages.versionActionPromoteError));\n    };\n\n    handleActionRestore = (versionId: string): Promise<void> => {\n        this.setState({ isLoading: true });\n\n        return this.api\n            .restoreVersion(this.findVersion(versionId))\n            .then(() => this.api.fetchVersion(versionId))\n            .then(this.handleRestoreSuccess)\n            .then(() => this.props.onVersionRestore(versionId))\n            .catch(() => this.handleActionError(messages.versionActionRestoreError));\n    };\n\n    handleActionError = (message: MessageDescriptor): void => {\n        this.setState({\n            error: message,\n            isLoading: false,\n        });\n    };\n\n    handleDeleteSuccess = (data: BoxItemVersion): void => {\n        const { versionId: selectedVersionId } = this.props;\n        const { id: versionId } = data;\n\n        this.mergeResponse(data);\n\n        // Bump the user to the current version if they deleted their selected version\n        if (versionId === selectedVersionId) {\n            this.updateVersionToCurrent();\n        }\n    };\n\n    handleRestoreSuccess = (data: BoxItemVersion): void => {\n        this.mergeResponse(data);\n    };\n\n    handleFetchError = (): void => {\n        this.setState({\n            error: messages.versionFetchError,\n            isLoading: false,\n            isWatermarked: false,\n            versionCount: 0,\n            versions: [],\n        });\n    };\n\n    handleFetchSuccess = ([fileResponse, versionsResponse]): [BoxItem, FileVersions] => {\n        const { api } = this.props;\n        const { version_limit } = fileResponse;\n        const isWatermarked = getProp(fileResponse, 'watermark_info.is_watermarked', false);\n        const versionLimit = version_limit !== null && version_limit !== undefined ? version_limit : Infinity;\n        const versionsWithPermissions = api.getVersionsAPI(false).addPermissions(versionsResponse, fileResponse) || {};\n        const { entries: versions, total_count: versionCount } = versionsWithPermissions;\n\n        this.setState(\n            {\n                error: undefined,\n                isLoading: false,\n                isWatermarked,\n                versionCount,\n                versionLimit,\n                versions: this.sortVersions(versions),\n            },\n            this.verifyVersion,\n        );\n\n        return [fileResponse, versionsResponse];\n    };\n\n    handlePromoteSuccess = ([file]: [BoxItem, FileVersions]): void => {\n        const { file_version: fileVersion } = file;\n\n        if (fileVersion) {\n            this.updateVersion(fileVersion.id);\n        }\n    };\n\n    initialize = (): void => {\n        this.api = new VersionsSidebarAPI(this.props);\n    };\n\n    fetchData = (): void => {\n        this.api\n            .fetchData()\n            .then(this.handleFetchSuccess)\n            .catch(this.handleFetchError);\n    };\n\n    findVersion = (versionId: ?string): ?BoxItemVersion => {\n        const { versions } = this.state;\n\n        return versions.find(version => version.id === versionId);\n    };\n\n    getCurrentVersionId = (): ?string => {\n        const { versions } = this.state;\n        return versions[0] ? versions[0].id : null;\n    };\n\n    mergeVersions = (newVersion: BoxItemVersion): Array<BoxItemVersion> => {\n        const { versions } = this.state;\n        const newVersionId = newVersion ? newVersion.id : '';\n        return versions.map(version => (version.id === newVersionId ? merge({ ...version }, newVersion) : version));\n    };\n\n    mergeResponse = (data: BoxItemVersion): void => {\n        const newVersions = this.mergeVersions(data);\n\n        this.setState({\n            error: undefined,\n            isLoading: false,\n            versions: newVersions,\n        });\n    };\n\n    refresh(): void {\n        this.initialize();\n        this.setState({ isLoading: true }, this.fetchData);\n    }\n\n    sortVersions(versions?: Array<BoxItemVersion> = []): Array<BoxItemVersion> {\n        return [...versions].sort((a, b) => Date.parse(b.created_at) - Date.parse(a.created_at));\n    }\n\n    updateVersion = (versionId?: ?string): void => {\n        const { history, match } = this.props;\n        return history.push(generatePath(match.path, { ...match.params, versionId }));\n    };\n\n    updateVersionToCurrent = (): void => {\n        this.updateVersion(this.getCurrentVersionId());\n    };\n\n    verifyVersion = () => {\n        const { onVersionChange, versionId } = this.props;\n        const selectedVersion = this.findVersion(versionId);\n\n        if (selectedVersion) {\n            onVersionChange(selectedVersion, {\n                currentVersionId: this.getCurrentVersionId(),\n                updateVersionToCurrent: this.updateVersionToCurrent,\n            });\n        } else {\n            this.updateVersionToCurrent();\n        }\n    };\n\n    render() {\n        const { fileId, parentName } = this.props;\n\n        return (\n            <VersionsSidebar\n                fileId={fileId}\n                onDelete={this.handleActionDelete}\n                onDownload={this.handleActionDownload}\n                onPreview={this.handleActionPreview}\n                onPromote={this.handleActionPromote}\n                onRestore={this.handleActionRestore}\n                parentName={parentName}\n                {...this.state}\n            />\n        );\n    }\n}\n\nexport type VersionsSidebarProps = Props;\nexport default flow([withRouter, withAPIContext])(VersionsSidebarContainer);\n"],"sourceRoot":""}